ARM GAS  /tmp/ccBBWuoI.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"sump.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	triggerMask,4,4
  18              		.comm	triggerValue,4,4
  19              		.comm	flags,2,2
  20              		.comm	period,2,2
  21              		.comm	transferSize,4,4
  22              		.section	.data.metaData,"aw",%progbits
  23              		.align	2
  26              	metaData:
  27 0000 01       		.byte	1
  28 0001 4D       		.byte	77
  29 0002 65       		.byte	101
  30 0003 61       		.byte	97
  31 0004 73       		.byte	115
  32 0005 75       		.byte	117
  33 0006 72       		.byte	114
  34 0007 69       		.byte	105
  35 0008 6E       		.byte	110
  36 0009 67       		.byte	103
  37 000a 20       		.byte	32
  38 000b 43       		.byte	67
  39 000c 6F       		.byte	111
  40 000d 6D       		.byte	109
  41 000e 70       		.byte	112
  42 000f 6C       		.byte	108
  43 0010 65       		.byte	101
  44 0011 78       		.byte	120
  45 0012 00       		.byte	0
  46 0013 02       		.byte	2
  47 0014 4E       		.byte	78
  48 0015 6F       		.byte	111
  49 0016 46       		.byte	70
  50 0017 50       		.byte	80
  51 0018 47       		.byte	71
  52 0019 41       		.byte	65
  53 001a 20       		.byte	32
  54 001b 3A       		.byte	58
  55 001c 28       		.byte	40
  56 001d 00       		.byte	0
  57 001e 03       		.byte	3
  58 001f 56       		.byte	86
  59 0020 65       		.byte	101
ARM GAS  /tmp/ccBBWuoI.s 			page 2


  60 0021 72       		.byte	114
  61 0022 79       		.byte	121
  62 0023 20       		.byte	32
  63 0024 62       		.byte	98
  64 0025 65       		.byte	101
  65 0026 74       		.byte	116
  66 0027 61       		.byte	97
  67 0028 00       		.byte	0
  68 0029 23       		.byte	35
  69 002a 01       		.byte	1
  70 002b 31       		.byte	49
  71 002c 2D       		.byte	45
  72 002d 00       		.byte	0
  73 002e 21       		.byte	33
  74 002f 00       		.byte	0
  75 0030 00       		.byte	0
  76 0031 70       		.byte	112
  77 0032 00       		.byte	0
  78 0033 40       		.byte	64
  79 0034 08       		.byte	8
  80 0035 41       		.byte	65
  81 0036 02       		.byte	2
  82 0037 00       		.byte	0
  83              		.section	.data.divider,"aw",%progbits
  84              		.align	2
  87              	divider:
  88 0000 01000000 		.word	1
  89              		.section	.text.CalcLocalDivider,"ax",%progbits
  90              		.align	1
  91              		.global	CalcLocalDivider
  92              		.syntax unified
  93              		.thumb
  94              		.thumb_func
  95              		.fpu fpv4-sp-d16
  97              	CalcLocalDivider:
  98              	.LFB133:
  99              		.file 1 "la/sump.c"
   1:la/sump.c     **** #include "sump.h"
   2:la/sump.c     **** #include "sampling.h"
   3:la/sump.c     **** #include "usbd_cdc_if.h"
   4:la/sump.c     **** 
   5:la/sump.c     **** 
   6:la/sump.c     **** static char metaData[]
   7:la/sump.c     ****      = {SUMP_META_NAME, 'M', 'e', 'a', 's', 'u', 'r', 'i', 'n', 'g', ' ','C', 'o', 'm', 'p', 'l', '
   8:la/sump.c     **** 		SUMP_META_FPGA_VERSION, 'N', 'o', 'F', 'P', 'G', 'A', ' ', ':', '(', 0,
   9:la/sump.c     **** 		SUMP_META_CPU_VERSION, 'V', 'e', 'r', 'y', ' ','b' ,'e', 't', 'a', 0,
  10:la/sump.c     **** 		SUMP_META_SAMPLE_RATE, BYTE4(maxSampleRate), BYTE3(maxSampleRate), BYTE2(maxSampleRate), BYTE1(ma
  11:la/sump.c     **** 		SUMP_META_SAMPLE_RAM, 0, 0, BYTE2(maxSampleMemory), BYTE1(maxSampleMemory), //24*1024 b
  12:la/sump.c     **** 		SUMP_META_PROBES_B, 8,
  13:la/sump.c     **** 		SUMP_META_PROTOCOL_B, 2,
  14:la/sump.c     **** 		SUMP_META_END
  15:la/sump.c     **** };
  16:la/sump.c     **** 
  17:la/sump.c     **** static uint32_t divider = 1;
  18:la/sump.c     **** 
  19:la/sump.c     **** uint32_t CalcLocalDivider(uint32_t divider, const uint32_t localFrequency, const uint32_t sumpFrequ
  20:la/sump.c     **** {
ARM GAS  /tmp/ccBBWuoI.s 			page 3


 100              		.loc 1 20 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 16
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105 0000 80B4     		push	{r7}
 106              	.LCFI0:
 107              		.cfi_def_cfa_offset 4
 108              		.cfi_offset 7, -4
 109 0002 85B0     		sub	sp, sp, #20
 110              	.LCFI1:
 111              		.cfi_def_cfa_offset 24
 112 0004 00AF     		add	r7, sp, #0
 113              	.LCFI2:
 114              		.cfi_def_cfa_register 7
 115 0006 F860     		str	r0, [r7, #12]
 116 0008 B960     		str	r1, [r7, #8]
 117 000a 7A60     		str	r2, [r7, #4]
  21:la/sump.c     **** 	return localFrequency / (sumpFrequency / (divider + 1)) - 1;
 118              		.loc 1 21 0
 119 000c FB68     		ldr	r3, [r7, #12]
 120 000e 0133     		adds	r3, r3, #1
 121 0010 7A68     		ldr	r2, [r7, #4]
 122 0012 B2FBF3F3 		udiv	r3, r2, r3
 123 0016 BA68     		ldr	r2, [r7, #8]
 124 0018 B2FBF3F3 		udiv	r3, r2, r3
 125 001c 013B     		subs	r3, r3, #1
  22:la/sump.c     **** }
 126              		.loc 1 22 0
 127 001e 1846     		mov	r0, r3
 128 0020 1437     		adds	r7, r7, #20
 129              	.LCFI3:
 130              		.cfi_def_cfa_offset 4
 131 0022 BD46     		mov	sp, r7
 132              	.LCFI4:
 133              		.cfi_def_cfa_register 13
 134              		@ sp needed
 135 0024 5DF8047B 		ldr	r7, [sp], #4
 136              	.LCFI5:
 137              		.cfi_restore 7
 138              		.cfi_def_cfa_offset 0
 139 0028 7047     		bx	lr
 140              		.cfi_endproc
 141              	.LFE133:
 143              		.section	.rodata
 144              		.align	2
 145              	.LC0:
 146 0000 31414C53 		.ascii	"1ALS\000"
 146      00
 147              		.section	.text.SumpProcessRequest,"ax",%progbits
 148              		.align	1
 149              		.global	SumpProcessRequest
 150              		.syntax unified
 151              		.thumb
 152              		.thumb_func
 153              		.fpu fpv4-sp-d16
 155              	SumpProcessRequest:
ARM GAS  /tmp/ccBBWuoI.s 			page 4


 156              	.LFB134:
  23:la/sump.c     **** 
  24:la/sump.c     **** int SumpProcessRequest(uint8_t *buffer, uint16_t len)
  25:la/sump.c     **** {
 157              		.loc 1 25 0
 158              		.cfi_startproc
 159              		@ args = 0, pretend = 0, frame = 24
 160              		@ frame_needed = 1, uses_anonymous_args = 0
 161 0000 80B5     		push	{r7, lr}
 162              	.LCFI6:
 163              		.cfi_def_cfa_offset 8
 164              		.cfi_offset 7, -8
 165              		.cfi_offset 14, -4
 166 0002 86B0     		sub	sp, sp, #24
 167              	.LCFI7:
 168              		.cfi_def_cfa_offset 32
 169 0004 00AF     		add	r7, sp, #0
 170              	.LCFI8:
 171              		.cfi_def_cfa_register 7
 172 0006 7860     		str	r0, [r7, #4]
 173 0008 0B46     		mov	r3, r1
 174 000a 7B80     		strh	r3, [r7, #2]	@ movhi
  26:la/sump.c     **** 	int result = 0;
 175              		.loc 1 26 0
 176 000c 0023     		movs	r3, #0
 177 000e 7B61     		str	r3, [r7, #20]
  27:la/sump.c     **** 	switch(buffer[0])
 178              		.loc 1 27 0
 179 0010 7B68     		ldr	r3, [r7, #4]
 180 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 181 0014 802B     		cmp	r3, #128
 182 0016 3BD0     		beq	.L5
 183 0018 802B     		cmp	r3, #128
 184 001a 0BDC     		bgt	.L6
 185 001c 012B     		cmp	r3, #1
 186 001e 18D0     		beq	.L7
 187 0020 012B     		cmp	r3, #1
 188 0022 02DC     		bgt	.L8
 189 0024 002B     		cmp	r3, #0
 190 0026 0FD0     		beq	.L9
 191 0028 9FE0     		b	.L4
 192              	.L8:
 193 002a 022B     		cmp	r3, #2
 194 002c 1AD0     		beq	.L31
 195 002e 042B     		cmp	r3, #4
 196 0030 23D0     		beq	.L32
 197 0032 9AE0     		b	.L4
 198              	.L6:
 199 0034 822B     		cmp	r3, #130
 200 0036 00F08380 		beq	.L12
 201 003a 822B     		cmp	r3, #130
 202 003c 4FDB     		blt	.L13
 203 003e C02B     		cmp	r3, #192
 204 0040 66D0     		beq	.L14
 205 0042 C12B     		cmp	r3, #193
 206 0044 70D0     		beq	.L15
 207 0046 90E0     		b	.L4
ARM GAS  /tmp/ccBBWuoI.s 			page 5


 208              	.L9:
  28:la/sump.c     **** 	{
  29:la/sump.c     **** 	case SUMP_CMD_RESET://reset
  30:la/sump.c     **** 		//SamplingSetupTimer(16);
  31:la/sump.c     **** 		Stop();
 209              		.loc 1 31 0
 210 0048 FFF7FEFF 		bl	Stop
  32:la/sump.c     **** 	    result = 1;
 211              		.loc 1 32 0
 212 004c 0123     		movs	r3, #1
 213 004e 7B61     		str	r3, [r7, #20]
  33:la/sump.c     **** 	  break;
 214              		.loc 1 33 0
 215 0050 8BE0     		b	.L4
 216              	.L7:
  34:la/sump.c     **** 	case SUMP_CMD_RUN://run
  35:la/sump.c     **** 		SamplingClearBuffer();
 217              		.loc 1 35 0
 218 0052 FFF7FEFF 		bl	SamplingClearBuffer
  36:la/sump.c     **** 		Start();
 219              		.loc 1 36 0
 220 0056 FFF7FEFF 		bl	Start
  37:la/sump.c     **** 		Arm();
 221              		.loc 1 37 0
 222 005a FFF7FEFF 		bl	Arm
  38:la/sump.c     **** 		result = 1;
 223              		.loc 1 38 0
 224 005e 0123     		movs	r3, #1
 225 0060 7B61     		str	r3, [r7, #20]
  39:la/sump.c     **** 	  break;
 226              		.loc 1 39 0
 227 0062 82E0     		b	.L4
 228              	.L31:
  40:la/sump.c     **** 	case SUMP_CMD_ID://ID
  41:la/sump.c     **** 		//APP_FOPS.pIf_DataTx((uint8_t*)"1ALS", 4);
  42:la/sump.c     **** 		while (CDC_Transmit_FS((uint8_t*)"1ALS", 4) != 0){};
 229              		.loc 1 42 0
 230 0064 00BF     		nop
 231              	.L16:
 232              		.loc 1 42 0 is_stmt 0 discriminator 1
 233 0066 0421     		movs	r1, #4
 234 0068 4248     		ldr	r0, .L33
 235 006a FFF7FEFF 		bl	CDC_Transmit_FS
 236 006e 0346     		mov	r3, r0
 237 0070 002B     		cmp	r3, #0
 238 0072 F8D1     		bne	.L16
  43:la/sump.c     **** 		result = 1;
 239              		.loc 1 43 0 is_stmt 1
 240 0074 0123     		movs	r3, #1
 241 0076 7B61     		str	r3, [r7, #20]
  44:la/sump.c     **** 	  break;
 242              		.loc 1 44 0
 243 0078 77E0     		b	.L4
 244              	.L32:
  45:la/sump.c     **** 	case SUMP_CMD_META://Query metas
  46:la/sump.c     **** 		//APP_FOPS.pIf_DataTx((uint8_t*)metaData, sizeof(metaData));
  47:la/sump.c     **** 		while (CDC_Transmit_FS((uint8_t*)metaData, sizeof(metaData)) != 0){};
ARM GAS  /tmp/ccBBWuoI.s 			page 6


 245              		.loc 1 47 0
 246 007a 00BF     		nop
 247              	.L17:
 248              		.loc 1 47 0 is_stmt 0 discriminator 1
 249 007c 3821     		movs	r1, #56
 250 007e 3E48     		ldr	r0, .L33+4
 251 0080 FFF7FEFF 		bl	CDC_Transmit_FS
 252 0084 0346     		mov	r3, r0
 253 0086 002B     		cmp	r3, #0
 254 0088 F8D1     		bne	.L17
  48:la/sump.c     **** 		result = 1;
 255              		.loc 1 48 0 is_stmt 1
 256 008a 0123     		movs	r3, #1
 257 008c 7B61     		str	r3, [r7, #20]
  49:la/sump.c     **** 	  break;
 258              		.loc 1 49 0
 259 008e 6CE0     		b	.L4
 260              	.L5:
  50:la/sump.c     **** 	  case SUMP_CMD_SET_SAMPLE_RATE:
  51:la/sump.c     **** 		if(len == 5)
 261              		.loc 1 51 0
 262 0090 7B88     		ldrh	r3, [r7, #2]
 263 0092 052B     		cmp	r3, #5
 264 0094 60D1     		bne	.L26
  52:la/sump.c     **** 		{
  53:la/sump.c     **** 			//div120 = 120MHz / (100MHz / (div100 + 1)) - 1;
  54:la/sump.c     **** 			divider = *((uint32_t*)(buffer+1));
 265              		.loc 1 54 0
 266 0096 7B68     		ldr	r3, [r7, #4]
 267 0098 D3F80130 		ldr	r3, [r3, #1]
 268 009c 374A     		ldr	r2, .L33+8
 269 009e 1360     		str	r3, [r2]
  55:la/sump.c     **** 			//if maximum samplerate is 20MHz => 100/20 = 5, 5 - 1 = 4
  56:la/sump.c     **** 			if(divider != 0)
 270              		.loc 1 56 0
 271 00a0 364B     		ldr	r3, .L33+8
 272 00a2 1B68     		ldr	r3, [r3]
 273 00a4 002B     		cmp	r3, #0
 274 00a6 0BD0     		beq	.L19
 275              	.LBB2:
  57:la/sump.c     **** 			{
  58:la/sump.c     **** 				uint32_t clocks = 168000000; // сделать ф-ю для вычисления clocks
 276              		.loc 1 58 0
 277 00a8 354B     		ldr	r3, .L33+12
 278 00aa FB60     		str	r3, [r7, #12]
  59:la/sump.c     **** 				divider = CalcLocalDivider(divider, clocks, SUMP_ORIGINAL_FREQ);
 279              		.loc 1 59 0
 280 00ac 334B     		ldr	r3, .L33+8
 281 00ae 1B68     		ldr	r3, [r3]
 282 00b0 344A     		ldr	r2, .L33+16
 283 00b2 F968     		ldr	r1, [r7, #12]
 284 00b4 1846     		mov	r0, r3
 285 00b6 FFF7FEFF 		bl	CalcLocalDivider
 286 00ba 0246     		mov	r2, r0
 287 00bc 2F4B     		ldr	r3, .L33+8
 288 00be 1A60     		str	r2, [r3]
 289              	.L19:
ARM GAS  /tmp/ccBBWuoI.s 			page 7


 290              	.LBE2:
  60:la/sump.c     **** 			}
  61:la/sump.c     **** 			if(divider == 0)
 291              		.loc 1 61 0
 292 00c0 2E4B     		ldr	r3, .L33+8
 293 00c2 1B68     		ldr	r3, [r3]
 294 00c4 002B     		cmp	r3, #0
 295 00c6 02D1     		bne	.L20
  62:la/sump.c     **** 			{
  63:la/sump.c     **** 				divider = 1;
 296              		.loc 1 63 0
 297 00c8 2C4B     		ldr	r3, .L33+8
 298 00ca 0122     		movs	r2, #1
 299 00cc 1A60     		str	r2, [r3]
 300              	.L20:
  64:la/sump.c     **** 			}
  65:la/sump.c     **** 			SetSamplingPeriod(divider);
 301              		.loc 1 65 0
 302 00ce 2B4B     		ldr	r3, .L33+8
 303 00d0 1B68     		ldr	r3, [r3]
 304 00d2 1846     		mov	r0, r3
 305 00d4 FFF7FEFF 		bl	SetSamplingPeriod
  66:la/sump.c     **** 			result = 1;
 306              		.loc 1 66 0
 307 00d8 0123     		movs	r3, #1
 308 00da 7B61     		str	r3, [r7, #20]
  67:la/sump.c     **** 			//GUI_Text(0, 14, (uint8_t*)text, White, Black);
  68:la/sump.c     **** 		}
  69:la/sump.c     **** 		break;
 309              		.loc 1 69 0
 310 00dc 3CE0     		b	.L26
 311              	.L13:
  70:la/sump.c     **** 	  case SUMP_CMD_SET_COUNTS:
  71:la/sump.c     **** 		if(len == 5)
 312              		.loc 1 71 0
 313 00de 7B88     		ldrh	r3, [r7, #2]
 314 00e0 052B     		cmp	r3, #5
 315 00e2 3BD1     		bne	.L27
 316              	.LBB3:
  72:la/sump.c     **** 		{
  73:la/sump.c     **** 			uint16_t readCount  = 1 + *((uint16_t*)(buffer+1));
 317              		.loc 1 73 0
 318 00e4 7B68     		ldr	r3, [r7, #4]
 319 00e6 0133     		adds	r3, r3, #1
 320 00e8 1B88     		ldrh	r3, [r3]
 321 00ea 0133     		adds	r3, r3, #1
 322 00ec 7B82     		strh	r3, [r7, #18]	@ movhi
  74:la/sump.c     **** 			uint16_t delayCount = *((uint16_t*)(buffer+3));
 323              		.loc 1 74 0
 324 00ee 7B68     		ldr	r3, [r7, #4]
 325 00f0 B3F80330 		ldrh	r3, [r3, #3]	@ movhi
 326 00f4 3B82     		strh	r3, [r7, #16]	@ movhi
  75:la/sump.c     **** 			SetBufferSize(4 * readCount);
 327              		.loc 1 75 0
 328 00f6 7B8A     		ldrh	r3, [r7, #18]
 329 00f8 9B00     		lsls	r3, r3, #2
 330 00fa 1846     		mov	r0, r3
ARM GAS  /tmp/ccBBWuoI.s 			page 8


 331 00fc FFF7FEFF 		bl	SetBufferSize
  76:la/sump.c     **** 			SetDelayCount(4 * delayCount);
 332              		.loc 1 76 0
 333 0100 3B8A     		ldrh	r3, [r7, #16]
 334 0102 9B00     		lsls	r3, r3, #2
 335 0104 1846     		mov	r0, r3
 336 0106 FFF7FEFF 		bl	SetDelayCount
  77:la/sump.c     **** 			result = 1;
 337              		.loc 1 77 0
 338 010a 0123     		movs	r3, #1
 339 010c 7B61     		str	r3, [r7, #20]
 340              	.LBE3:
  78:la/sump.c     **** 			//GUI_Text(100, 14, (uint8_t*)text, White, Black);
  79:la/sump.c     **** 		}
  80:la/sump.c     **** 		break;
 341              		.loc 1 80 0
 342 010e 25E0     		b	.L27
 343              	.L14:
  81:la/sump.c     **** 	case SUMP_CMD_SET_BT0_MASK:
  82:la/sump.c     **** 		if(len == 5)
 344              		.loc 1 82 0
 345 0110 7B88     		ldrh	r3, [r7, #2]
 346 0112 052B     		cmp	r3, #5
 347 0114 24D1     		bne	.L28
  83:la/sump.c     **** 		{
  84:la/sump.c     **** 			SetTriggerMask(*(uint32_t*)(buffer+1));
 348              		.loc 1 84 0
 349 0116 7B68     		ldr	r3, [r7, #4]
 350 0118 0133     		adds	r3, r3, #1
 351 011a 1B68     		ldr	r3, [r3]
 352 011c 1846     		mov	r0, r3
 353 011e FFF7FEFF 		bl	SetTriggerMask
  85:la/sump.c     **** 			result = 1;
 354              		.loc 1 85 0
 355 0122 0123     		movs	r3, #1
 356 0124 7B61     		str	r3, [r7, #20]
  86:la/sump.c     **** 		}
  87:la/sump.c     **** 		break;
 357              		.loc 1 87 0
 358 0126 1BE0     		b	.L28
 359              	.L15:
  88:la/sump.c     **** 	case SUMP_CMD_SET_BT0_VALUE:
  89:la/sump.c     **** 		if(len == 5)
 360              		.loc 1 89 0
 361 0128 7B88     		ldrh	r3, [r7, #2]
 362 012a 052B     		cmp	r3, #5
 363 012c 1AD1     		bne	.L29
  90:la/sump.c     **** 		{
  91:la/sump.c     **** 			SetTriggerValue(*(uint32_t*)(buffer+1));
 364              		.loc 1 91 0
 365 012e 7B68     		ldr	r3, [r7, #4]
 366 0130 0133     		adds	r3, r3, #1
 367 0132 1B68     		ldr	r3, [r3]
 368 0134 1846     		mov	r0, r3
 369 0136 FFF7FEFF 		bl	SetTriggerValue
  92:la/sump.c     **** 			result = 1;
 370              		.loc 1 92 0
ARM GAS  /tmp/ccBBWuoI.s 			page 9


 371 013a 0123     		movs	r3, #1
 372 013c 7B61     		str	r3, [r7, #20]
  93:la/sump.c     **** 		}
  94:la/sump.c     **** 		break;
 373              		.loc 1 94 0
 374 013e 11E0     		b	.L29
 375              	.L12:
  95:la/sump.c     **** 	case SUMP_CMD_SET_FLAGS:
  96:la/sump.c     **** 		if(len == 5)
 376              		.loc 1 96 0
 377 0140 7B88     		ldrh	r3, [r7, #2]
 378 0142 052B     		cmp	r3, #5
 379 0144 10D1     		bne	.L30
  97:la/sump.c     **** 		{
  98:la/sump.c     **** 			SetFlags(*(uint16_t*)(buffer+1));
 380              		.loc 1 98 0
 381 0146 7B68     		ldr	r3, [r7, #4]
 382 0148 0133     		adds	r3, r3, #1
 383 014a 1B88     		ldrh	r3, [r3]
 384 014c 1846     		mov	r0, r3
 385 014e FFF7FEFF 		bl	SetFlags
  99:la/sump.c     **** 			result = 1;
 386              		.loc 1 99 0
 387 0152 0123     		movs	r3, #1
 388 0154 7B61     		str	r3, [r7, #20]
 100:la/sump.c     **** 			
 101:la/sump.c     **** 		}
 102:la/sump.c     **** 		break;
 389              		.loc 1 102 0
 390 0156 07E0     		b	.L30
 391              	.L26:
  69:la/sump.c     **** 	  case SUMP_CMD_SET_COUNTS:
 392              		.loc 1 69 0
 393 0158 00BF     		nop
 394 015a 06E0     		b	.L4
 395              	.L27:
  80:la/sump.c     **** 	case SUMP_CMD_SET_BT0_MASK:
 396              		.loc 1 80 0
 397 015c 00BF     		nop
 398 015e 04E0     		b	.L4
 399              	.L28:
  87:la/sump.c     **** 	case SUMP_CMD_SET_BT0_VALUE:
 400              		.loc 1 87 0
 401 0160 00BF     		nop
 402 0162 02E0     		b	.L4
 403              	.L29:
  94:la/sump.c     **** 	case SUMP_CMD_SET_FLAGS:
 404              		.loc 1 94 0
 405 0164 00BF     		nop
 406 0166 00E0     		b	.L4
 407              	.L30:
 408              		.loc 1 102 0
 409 0168 00BF     		nop
 410              	.L4:
 103:la/sump.c     **** 	}
 104:la/sump.c     **** 	return result;
 411              		.loc 1 104 0
ARM GAS  /tmp/ccBBWuoI.s 			page 10


 412 016a 7B69     		ldr	r3, [r7, #20]
 105:la/sump.c     **** }...
 413              		.loc 1 105 0
 414 016c 1846     		mov	r0, r3
 415 016e 1837     		adds	r7, r7, #24
 416              	.LCFI9:
 417              		.cfi_def_cfa_offset 8
 418 0170 BD46     		mov	sp, r7
 419              	.LCFI10:
 420              		.cfi_def_cfa_register 13
 421              		@ sp needed
 422 0172 80BD     		pop	{r7, pc}
 423              	.L34:
 424              		.align	2
 425              	.L33:
 426 0174 00000000 		.word	.LC0
 427 0178 00000000 		.word	metaData
 428 017c 00000000 		.word	divider
 429 0180 007A030A 		.word	168000000
 430 0184 00E1F505 		.word	100000000
 431              		.cfi_endproc
 432              	.LFE134:
 434              		.text
 435              	.Letext0:
 436              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 437              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 438              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 439              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 440              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 441              		.file 7 "la/sampling.h"
 442              		.file 8 "/usr/arm-none-eabi/include/sys/lock.h"
 443              		.file 9 "/usr/arm-none-eabi/include/sys/_types.h"
 444              		.file 10 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 445              		.file 11 "/usr/arm-none-eabi/include/sys/reent.h"
 446              		.file 12 "/usr/arm-none-eabi/include/stdlib.h"
 447              		.file 13 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 448              		.file 14 "Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc/usbd_cdc.h"
 449              		.file 15 "Inc/usbd_cdc_if.h"
ARM GAS  /tmp/ccBBWuoI.s 			page 11


DEFINED SYMBOLS
                            *ABS*:0000000000000000 sump.c
                            *COM*:0000000000000004 triggerMask
                            *COM*:0000000000000004 triggerValue
                            *COM*:0000000000000002 flags
                            *COM*:0000000000000002 period
                            *COM*:0000000000000004 transferSize
     /tmp/ccBBWuoI.s:23     .data.metaData:0000000000000000 $d
     /tmp/ccBBWuoI.s:26     .data.metaData:0000000000000000 metaData
     /tmp/ccBBWuoI.s:84     .data.divider:0000000000000000 $d
     /tmp/ccBBWuoI.s:87     .data.divider:0000000000000000 divider
     /tmp/ccBBWuoI.s:90     .text.CalcLocalDivider:0000000000000000 $t
     /tmp/ccBBWuoI.s:97     .text.CalcLocalDivider:0000000000000000 CalcLocalDivider
     /tmp/ccBBWuoI.s:144    .rodata:0000000000000000 $d
     /tmp/ccBBWuoI.s:148    .text.SumpProcessRequest:0000000000000000 $t
     /tmp/ccBBWuoI.s:155    .text.SumpProcessRequest:0000000000000000 SumpProcessRequest
     /tmp/ccBBWuoI.s:426    .text.SumpProcessRequest:0000000000000174 $d

UNDEFINED SYMBOLS
Stop
SamplingClearBuffer
Start
Arm
CDC_Transmit_FS
SetSamplingPeriod
SetBufferSize
SetDelayCount
SetTriggerMask
SetTriggerValue
SetFlags
