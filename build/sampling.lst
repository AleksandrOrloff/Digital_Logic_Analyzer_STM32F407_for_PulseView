ARM GAS  /tmp/ccJjpe8F.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"sampling.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	triggerMask,4,4
  18              		.comm	triggerValue,4,4
  19              		.comm	flags,2,2
  20              		.comm	period,2,2
  21              		.comm	transferSize,4,4
  22              		.section	.bss.transferCount,"aw",%nobits
  23              		.align	2
  26              	transferCount:
  27 0000 00000000 		.space	4
  28              		.section	.bss.delayCount,"aw",%nobits
  29              		.align	2
  32              	delayCount:
  33 0000 00000000 		.space	4
  34              		.comm	samplingRam,24576,4
  35              		.comm	arr,24576,4
  36              		.section	.text.SetBufferSize,"ax",%progbits
  37              		.align	1
  38              		.global	SetBufferSize
  39              		.syntax unified
  40              		.thumb
  41              		.thumb_func
  42              		.fpu fpv4-sp-d16
  44              	SetBufferSize:
  45              	.LFB133:
  46              		.file 1 "la/sampling.c"
   1:la/sampling.c **** #include "sampling.h"
   2:la/sampling.c **** #include "sump.h"
   3:la/sampling.c **** #include "usbd_cdc_if.h"
   4:la/sampling.c **** 
   5:la/sampling.c **** static uint32_t transferCount;
   6:la/sampling.c **** static uint32_t delayCount;
   7:la/sampling.c **** uint32_t samplingRam[MAX_SAMPLING_RAM/4];
   8:la/sampling.c **** uint8_t arr[MAX_SAMPLING_RAM];
   9:la/sampling.c **** 
  10:la/sampling.c **** void SetBufferSize(uint32_t value){
  47              		.loc 1 10 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 8
  50              		@ frame_needed = 1, uses_anonymous_args = 0
  51              		@ link register save eliminated.
  52 0000 80B4     		push	{r7}
ARM GAS  /tmp/ccJjpe8F.s 			page 2


  53              	.LCFI0:
  54              		.cfi_def_cfa_offset 4
  55              		.cfi_offset 7, -4
  56 0002 83B0     		sub	sp, sp, #12
  57              	.LCFI1:
  58              		.cfi_def_cfa_offset 16
  59 0004 00AF     		add	r7, sp, #0
  60              	.LCFI2:
  61              		.cfi_def_cfa_register 7
  62 0006 7860     		str	r0, [r7, #4]
  11:la/sampling.c **** 	transferCount = value;
  63              		.loc 1 11 0
  64 0008 044A     		ldr	r2, .L2
  65 000a 7B68     		ldr	r3, [r7, #4]
  66 000c 1360     		str	r3, [r2]
  12:la/sampling.c ****     }
  67              		.loc 1 12 0
  68 000e 00BF     		nop
  69 0010 0C37     		adds	r7, r7, #12
  70              	.LCFI3:
  71              		.cfi_def_cfa_offset 4
  72 0012 BD46     		mov	sp, r7
  73              	.LCFI4:
  74              		.cfi_def_cfa_register 13
  75              		@ sp needed
  76 0014 5DF8047B 		ldr	r7, [sp], #4
  77              	.LCFI5:
  78              		.cfi_restore 7
  79              		.cfi_def_cfa_offset 0
  80 0018 7047     		bx	lr
  81              	.L3:
  82 001a 00BF     		.align	2
  83              	.L2:
  84 001c 00000000 		.word	transferCount
  85              		.cfi_endproc
  86              	.LFE133:
  88              		.section	.text.SetDelayCount,"ax",%progbits
  89              		.align	1
  90              		.global	SetDelayCount
  91              		.syntax unified
  92              		.thumb
  93              		.thumb_func
  94              		.fpu fpv4-sp-d16
  96              	SetDelayCount:
  97              	.LFB134:
  13:la/sampling.c **** 
  14:la/sampling.c **** void SetDelayCount(uint32_t value){
  98              		.loc 1 14 0
  99              		.cfi_startproc
 100              		@ args = 0, pretend = 0, frame = 8
 101              		@ frame_needed = 1, uses_anonymous_args = 0
 102              		@ link register save eliminated.
 103 0000 80B4     		push	{r7}
 104              	.LCFI6:
 105              		.cfi_def_cfa_offset 4
 106              		.cfi_offset 7, -4
 107 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccJjpe8F.s 			page 3


 108              	.LCFI7:
 109              		.cfi_def_cfa_offset 16
 110 0004 00AF     		add	r7, sp, #0
 111              	.LCFI8:
 112              		.cfi_def_cfa_register 7
 113 0006 7860     		str	r0, [r7, #4]
  15:la/sampling.c **** 	delayCount = value & 0xfffffffe;
 114              		.loc 1 15 0
 115 0008 7B68     		ldr	r3, [r7, #4]
 116 000a 23F00103 		bic	r3, r3, #1
 117 000e 044A     		ldr	r2, .L5
 118 0010 1360     		str	r3, [r2]
  16:la/sampling.c ****     }
 119              		.loc 1 16 0
 120 0012 00BF     		nop
 121 0014 0C37     		adds	r7, r7, #12
 122              	.LCFI9:
 123              		.cfi_def_cfa_offset 4
 124 0016 BD46     		mov	sp, r7
 125              	.LCFI10:
 126              		.cfi_def_cfa_register 13
 127              		@ sp needed
 128 0018 5DF8047B 		ldr	r7, [sp], #4
 129              	.LCFI11:
 130              		.cfi_restore 7
 131              		.cfi_def_cfa_offset 0
 132 001c 7047     		bx	lr
 133              	.L6:
 134 001e 00BF     		.align	2
 135              	.L5:
 136 0020 00000000 		.word	delayCount
 137              		.cfi_endproc
 138              	.LFE134:
 140              		.section	.text.SetTriggerMask,"ax",%progbits
 141              		.align	1
 142              		.global	SetTriggerMask
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 146              		.fpu fpv4-sp-d16
 148              	SetTriggerMask:
 149              	.LFB135:
  17:la/sampling.c **** 
  18:la/sampling.c **** void SetTriggerMask(uint32_t value){
 150              		.loc 1 18 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 8
 153              		@ frame_needed = 1, uses_anonymous_args = 0
 154              		@ link register save eliminated.
 155 0000 80B4     		push	{r7}
 156              	.LCFI12:
 157              		.cfi_def_cfa_offset 4
 158              		.cfi_offset 7, -4
 159 0002 83B0     		sub	sp, sp, #12
 160              	.LCFI13:
 161              		.cfi_def_cfa_offset 16
 162 0004 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccJjpe8F.s 			page 4


 163              	.LCFI14:
 164              		.cfi_def_cfa_register 7
 165 0006 7860     		str	r0, [r7, #4]
  19:la/sampling.c ****     triggerMask = value;
 166              		.loc 1 19 0
 167 0008 044A     		ldr	r2, .L8
 168 000a 7B68     		ldr	r3, [r7, #4]
 169 000c 1360     		str	r3, [r2]
  20:la/sampling.c ****     }
 170              		.loc 1 20 0
 171 000e 00BF     		nop
 172 0010 0C37     		adds	r7, r7, #12
 173              	.LCFI15:
 174              		.cfi_def_cfa_offset 4
 175 0012 BD46     		mov	sp, r7
 176              	.LCFI16:
 177              		.cfi_def_cfa_register 13
 178              		@ sp needed
 179 0014 5DF8047B 		ldr	r7, [sp], #4
 180              	.LCFI17:
 181              		.cfi_restore 7
 182              		.cfi_def_cfa_offset 0
 183 0018 7047     		bx	lr
 184              	.L9:
 185 001a 00BF     		.align	2
 186              	.L8:
 187 001c 00000000 		.word	triggerMask
 188              		.cfi_endproc
 189              	.LFE135:
 191              		.section	.text.SetTriggerValue,"ax",%progbits
 192              		.align	1
 193              		.global	SetTriggerValue
 194              		.syntax unified
 195              		.thumb
 196              		.thumb_func
 197              		.fpu fpv4-sp-d16
 199              	SetTriggerValue:
 200              	.LFB136:
  21:la/sampling.c **** 
  22:la/sampling.c **** void SetTriggerValue(uint32_t value){
 201              		.loc 1 22 0
 202              		.cfi_startproc
 203              		@ args = 0, pretend = 0, frame = 8
 204              		@ frame_needed = 1, uses_anonymous_args = 0
 205              		@ link register save eliminated.
 206 0000 80B4     		push	{r7}
 207              	.LCFI18:
 208              		.cfi_def_cfa_offset 4
 209              		.cfi_offset 7, -4
 210 0002 83B0     		sub	sp, sp, #12
 211              	.LCFI19:
 212              		.cfi_def_cfa_offset 16
 213 0004 00AF     		add	r7, sp, #0
 214              	.LCFI20:
 215              		.cfi_def_cfa_register 7
 216 0006 7860     		str	r0, [r7, #4]
  23:la/sampling.c ****     triggerValue = value;
ARM GAS  /tmp/ccJjpe8F.s 			page 5


 217              		.loc 1 23 0
 218 0008 044A     		ldr	r2, .L11
 219 000a 7B68     		ldr	r3, [r7, #4]
 220 000c 1360     		str	r3, [r2]
  24:la/sampling.c ****     }
 221              		.loc 1 24 0
 222 000e 00BF     		nop
 223 0010 0C37     		adds	r7, r7, #12
 224              	.LCFI21:
 225              		.cfi_def_cfa_offset 4
 226 0012 BD46     		mov	sp, r7
 227              	.LCFI22:
 228              		.cfi_def_cfa_register 13
 229              		@ sp needed
 230 0014 5DF8047B 		ldr	r7, [sp], #4
 231              	.LCFI23:
 232              		.cfi_restore 7
 233              		.cfi_def_cfa_offset 0
 234 0018 7047     		bx	lr
 235              	.L12:
 236 001a 00BF     		.align	2
 237              	.L11:
 238 001c 00000000 		.word	triggerValue
 239              		.cfi_endproc
 240              	.LFE136:
 242              		.section	.text.SetFlags,"ax",%progbits
 243              		.align	1
 244              		.global	SetFlags
 245              		.syntax unified
 246              		.thumb
 247              		.thumb_func
 248              		.fpu fpv4-sp-d16
 250              	SetFlags:
 251              	.LFB137:
  25:la/sampling.c **** 
  26:la/sampling.c **** void SetFlags(uint32_t value){
 252              		.loc 1 26 0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 8
 255              		@ frame_needed = 1, uses_anonymous_args = 0
 256              		@ link register save eliminated.
 257 0000 80B4     		push	{r7}
 258              	.LCFI24:
 259              		.cfi_def_cfa_offset 4
 260              		.cfi_offset 7, -4
 261 0002 83B0     		sub	sp, sp, #12
 262              	.LCFI25:
 263              		.cfi_def_cfa_offset 16
 264 0004 00AF     		add	r7, sp, #0
 265              	.LCFI26:
 266              		.cfi_def_cfa_register 7
 267 0006 7860     		str	r0, [r7, #4]
  27:la/sampling.c ****     flags = value;
 268              		.loc 1 27 0
 269 0008 7B68     		ldr	r3, [r7, #4]
 270 000a 9AB2     		uxth	r2, r3
 271 000c 034B     		ldr	r3, .L14
ARM GAS  /tmp/ccJjpe8F.s 			page 6


 272 000e 1A80     		strh	r2, [r3]	@ movhi
  28:la/sampling.c ****     }
 273              		.loc 1 28 0
 274 0010 00BF     		nop
 275 0012 0C37     		adds	r7, r7, #12
 276              	.LCFI27:
 277              		.cfi_def_cfa_offset 4
 278 0014 BD46     		mov	sp, r7
 279              	.LCFI28:
 280              		.cfi_def_cfa_register 13
 281              		@ sp needed
 282 0016 5DF8047B 		ldr	r7, [sp], #4
 283              	.LCFI29:
 284              		.cfi_restore 7
 285              		.cfi_def_cfa_offset 0
 286 001a 7047     		bx	lr
 287              	.L15:
 288              		.align	2
 289              	.L14:
 290 001c 00000000 		.word	flags
 291              		.cfi_endproc
 292              	.LFE137:
 294              		.section	.text.SetSamplingPeriod,"ax",%progbits
 295              		.align	1
 296              		.global	SetSamplingPeriod
 297              		.syntax unified
 298              		.thumb
 299              		.thumb_func
 300              		.fpu fpv4-sp-d16
 302              	SetSamplingPeriod:
 303              	.LFB138:
  29:la/sampling.c **** 
  30:la/sampling.c **** void SetSamplingPeriod(uint32_t value){
 304              		.loc 1 30 0
 305              		.cfi_startproc
 306              		@ args = 0, pretend = 0, frame = 8
 307              		@ frame_needed = 1, uses_anonymous_args = 0
 308              		@ link register save eliminated.
 309 0000 80B4     		push	{r7}
 310              	.LCFI30:
 311              		.cfi_def_cfa_offset 4
 312              		.cfi_offset 7, -4
 313 0002 83B0     		sub	sp, sp, #12
 314              	.LCFI31:
 315              		.cfi_def_cfa_offset 16
 316 0004 00AF     		add	r7, sp, #0
 317              	.LCFI32:
 318              		.cfi_def_cfa_register 7
 319 0006 7860     		str	r0, [r7, #4]
  31:la/sampling.c ****     period = value;
 320              		.loc 1 31 0
 321 0008 7B68     		ldr	r3, [r7, #4]
 322 000a 9AB2     		uxth	r2, r3
 323 000c 034B     		ldr	r3, .L17
 324 000e 1A80     		strh	r2, [r3]	@ movhi
  32:la/sampling.c ****     }
 325              		.loc 1 32 0
ARM GAS  /tmp/ccJjpe8F.s 			page 7


 326 0010 00BF     		nop
 327 0012 0C37     		adds	r7, r7, #12
 328              	.LCFI33:
 329              		.cfi_def_cfa_offset 4
 330 0014 BD46     		mov	sp, r7
 331              	.LCFI34:
 332              		.cfi_def_cfa_register 13
 333              		@ sp needed
 334 0016 5DF8047B 		ldr	r7, [sp], #4
 335              	.LCFI35:
 336              		.cfi_restore 7
 337              		.cfi_def_cfa_offset 0
 338 001a 7047     		bx	lr
 339              	.L18:
 340              		.align	2
 341              	.L17:
 342 001c 00000000 		.word	period
 343              		.cfi_endproc
 344              	.LFE138:
 346              		.section	.text.Start,"ax",%progbits
 347              		.align	1
 348              		.global	Start
 349              		.syntax unified
 350              		.thumb
 351              		.thumb_func
 352              		.fpu fpv4-sp-d16
 354              	Start:
 355              	.LFB139:
  33:la/sampling.c **** 
  34:la/sampling.c **** void Start()
  35:la/sampling.c **** {
 356              		.loc 1 35 0
 357              		.cfi_startproc
 358              		@ args = 0, pretend = 0, frame = 0
 359              		@ frame_needed = 1, uses_anonymous_args = 0
 360 0000 80B5     		push	{r7, lr}
 361              	.LCFI36:
 362              		.cfi_def_cfa_offset 8
 363              		.cfi_offset 7, -8
 364              		.cfi_offset 14, -4
 365 0002 00AF     		add	r7, sp, #0
 366              	.LCFI37:
 367              		.cfi_def_cfa_register 7
  36:la/sampling.c ****     SetupSamplingTimer();
 368              		.loc 1 36 0
 369 0004 FFF7FEFF 		bl	SetupSamplingTimer
  37:la/sampling.c **** 	SetupSamplingDMA(samplingRam, transferCount);
 370              		.loc 1 37 0
 371 0008 0D4B     		ldr	r3, .L20
 372 000a 1B68     		ldr	r3, [r3]
 373 000c 1946     		mov	r1, r3
 374 000e 0D48     		ldr	r0, .L20+4
 375 0010 FFF7FEFF 		bl	SetupSamplingDMA
  38:la/sampling.c **** 	SetupDelayTimer();
 376              		.loc 1 38 0
 377 0014 FFF7FEFF 		bl	SetupDelayTimer
  39:la/sampling.c **** 	SetupRegularEXTITrigger();
ARM GAS  /tmp/ccJjpe8F.s 			page 8


 378              		.loc 1 39 0
 379 0018 FFF7FEFF 		bl	SetupRegularEXTITrigger
  40:la/sampling.c **** 	DMA2->HIFCR = DMA_HIFCR_CTCIF5; //No half transfer event on stream 5
 380              		.loc 1 40 0
 381 001c 0A4B     		ldr	r3, .L20+8
 382 001e 4FF40062 		mov	r2, #2048
 383 0022 DA60     		str	r2, [r3, #12]
  41:la/sampling.c **** 	DMA2_Stream5->CR |= DMA_SxCR_EN;
 384              		.loc 1 41 0
 385 0024 094B     		ldr	r3, .L20+12
 386 0026 1B68     		ldr	r3, [r3]
 387 0028 084A     		ldr	r2, .L20+12
 388 002a 43F00103 		orr	r3, r3, #1
 389 002e 1360     		str	r3, [r2]
  42:la/sampling.c **** 	TIM1->CR1 |= TIM_CR1_CEN;//enable timer
 390              		.loc 1 42 0
 391 0030 074B     		ldr	r3, .L20+16
 392 0032 1B68     		ldr	r3, [r3]
 393 0034 064A     		ldr	r2, .L20+16
 394 0036 43F00103 		orr	r3, r3, #1
 395 003a 1360     		str	r3, [r2]
  43:la/sampling.c **** }
 396              		.loc 1 43 0
 397 003c 00BF     		nop
 398 003e 80BD     		pop	{r7, pc}
 399              	.L21:
 400              		.align	2
 401              	.L20:
 402 0040 00000000 		.word	transferCount
 403 0044 00000000 		.word	samplingRam
 404 0048 00640240 		.word	1073898496
 405 004c 88640240 		.word	1073898632
 406 0050 00000140 		.word	1073807360
 407              		.cfi_endproc
 408              	.LFE139:
 410              		.section	.text.Stop,"ax",%progbits
 411              		.align	1
 412              		.global	Stop
 413              		.syntax unified
 414              		.thumb
 415              		.thumb_func
 416              		.fpu fpv4-sp-d16
 418              	Stop:
 419              	.LFB140:
  44:la/sampling.c **** 
  45:la/sampling.c **** void Stop()
  46:la/sampling.c **** {
 420              		.loc 1 46 0
 421              		.cfi_startproc
 422              		@ args = 0, pretend = 0, frame = 0
 423              		@ frame_needed = 1, uses_anonymous_args = 0
 424              		@ link register save eliminated.
 425 0000 80B4     		push	{r7}
 426              	.LCFI38:
 427              		.cfi_def_cfa_offset 4
 428              		.cfi_offset 7, -4
 429 0002 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccJjpe8F.s 			page 9


 430              	.LCFI39:
 431              		.cfi_def_cfa_register 7
  47:la/sampling.c **** 	DMA2_Stream5->CR &= ~(DMA_SxCR_TCIE | DMA_SxCR_EN);//stop dma
 432              		.loc 1 47 0
 433 0004 084B     		ldr	r3, .L23
 434 0006 1B68     		ldr	r3, [r3]
 435 0008 074A     		ldr	r2, .L23
 436 000a 23F01103 		bic	r3, r3, #17
 437 000e 1360     		str	r3, [r2]
  48:la/sampling.c **** 	TIM1->CR1 &= ~TIM_CR1_CEN;//stop sampling timer
 438              		.loc 1 48 0
 439 0010 064B     		ldr	r3, .L23+4
 440 0012 1B68     		ldr	r3, [r3]
 441 0014 054A     		ldr	r2, .L23+4
 442 0016 23F00103 		bic	r3, r3, #1
 443 001a 1360     		str	r3, [r2]
  49:la/sampling.c **** }
 444              		.loc 1 49 0
 445 001c 00BF     		nop
 446 001e BD46     		mov	sp, r7
 447              	.LCFI40:
 448              		.cfi_def_cfa_register 13
 449              		@ sp needed
 450 0020 5DF8047B 		ldr	r7, [sp], #4
 451              	.LCFI41:
 452              		.cfi_restore 7
 453              		.cfi_def_cfa_offset 0
 454 0024 7047     		bx	lr
 455              	.L24:
 456 0026 00BF     		.align	2
 457              	.L23:
 458 0028 88640240 		.word	1073898632
 459 002c 00000140 		.word	1073807360
 460              		.cfi_endproc
 461              	.LFE140:
 463              		.section	.text.Arm,"ax",%progbits
 464              		.align	1
 465              		.global	Arm
 466              		.syntax unified
 467              		.thumb
 468              		.thumb_func
 469              		.fpu fpv4-sp-d16
 471              	Arm:
 472              	.LFB141:
  50:la/sampling.c **** 
  51:la/sampling.c **** void Arm()
  52:la/sampling.c **** {
 473              		.loc 1 52 0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 0
 476              		@ frame_needed = 1, uses_anonymous_args = 0
 477              		@ link register save eliminated.
 478 0000 80B4     		push	{r7}
 479              	.LCFI42:
 480              		.cfi_def_cfa_offset 4
 481              		.cfi_offset 7, -4
 482 0002 00AF     		add	r7, sp, #0
ARM GAS  /tmp/ccJjpe8F.s 			page 10


 483              	.LCFI43:
 484              		.cfi_def_cfa_register 7
  53:la/sampling.c **** 	EXTI->PR = 0xffffffff;//clear pending
 485              		.loc 1 53 0
 486 0004 074B     		ldr	r3, .L26
 487 0006 4FF0FF32 		mov	r2, #-1
 488 000a 5A61     		str	r2, [r3, #20]
 489              	.LBB13:
 490              	.LBB14:
 491              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
ARM GAS  /tmp/ccJjpe8F.s 			page 11


  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  /tmp/ccJjpe8F.s 			page 12


 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccJjpe8F.s 			page 13


 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccJjpe8F.s 			page 14


 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
ARM GAS  /tmp/ccJjpe8F.s 			page 15


 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccJjpe8F.s 			page 16


 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccJjpe8F.s 			page 17


 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
ARM GAS  /tmp/ccJjpe8F.s 			page 18


 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
ARM GAS  /tmp/ccJjpe8F.s 			page 19


 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccJjpe8F.s 			page 20


 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
ARM GAS  /tmp/ccJjpe8F.s 			page 21


 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
ARM GAS  /tmp/ccJjpe8F.s 			page 22


 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
ARM GAS  /tmp/ccJjpe8F.s 			page 23


 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
ARM GAS  /tmp/ccJjpe8F.s 			page 24


 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccJjpe8F.s 			page 25


 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 492              		.loc 2 879 0
 493              		.syntax unified
 494              	@ 879 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 495 000c BFF34F8F 		dsb 0xF
 496              	@ 0 "" 2
 497              		.thumb
 498              		.syntax unified
 499              	.LBE14:
 500              	.LBE13:
  54:la/sampling.c **** 	__DSB();
  55:la/sampling.c **** 	EXTI->IMR = triggerMask;
 501              		.loc 1 55 0
 502 0010 044A     		ldr	r2, .L26
 503 0012 054B     		ldr	r3, .L26+4
 504 0014 1B68     		ldr	r3, [r3]
 505 0016 1360     		str	r3, [r2]
  56:la/sampling.c **** 
  57:la/sampling.c **** 	//comletionHandler = handler;
  58:la/sampling.c **** }
 506              		.loc 1 58 0
 507 0018 00BF     		nop
 508 001a BD46     		mov	sp, r7
 509              	.LCFI44:
ARM GAS  /tmp/ccJjpe8F.s 			page 26


 510              		.cfi_def_cfa_register 13
 511              		@ sp needed
 512 001c 5DF8047B 		ldr	r7, [sp], #4
 513              	.LCFI45:
 514              		.cfi_restore 7
 515              		.cfi_def_cfa_offset 0
 516 0020 7047     		bx	lr
 517              	.L27:
 518 0022 00BF     		.align	2
 519              	.L26:
 520 0024 003C0140 		.word	1073822720
 521 0028 00000000 		.word	triggerMask
 522              		.cfi_endproc
 523              	.LFE141:
 525              		.section	.text.SetupSamplingTimer,"ax",%progbits
 526              		.align	1
 527              		.global	SetupSamplingTimer
 528              		.syntax unified
 529              		.thumb
 530              		.thumb_func
 531              		.fpu fpv4-sp-d16
 533              	SetupSamplingTimer:
 534              	.LFB142:
  59:la/sampling.c **** 
  60:la/sampling.c **** void SetupSamplingTimer()
  61:la/sampling.c **** {
 535              		.loc 1 61 0
 536              		.cfi_startproc
 537              		@ args = 0, pretend = 0, frame = 8
 538              		@ frame_needed = 1, uses_anonymous_args = 0
 539              		@ link register save eliminated.
 540 0000 80B4     		push	{r7}
 541              	.LCFI46:
 542              		.cfi_def_cfa_offset 4
 543              		.cfi_offset 7, -4
 544 0002 83B0     		sub	sp, sp, #12
 545              	.LCFI47:
 546              		.cfi_def_cfa_offset 16
 547 0004 00AF     		add	r7, sp, #0
 548              	.LCFI48:
 549              		.cfi_def_cfa_register 7
 550              	.LBB15:
  62:la/sampling.c **** 	//RCC_APB2PeriphClockCmd(RCC_APB2ENR_TIM1EN, ENABLE);
  63:la/sampling.c **** 	__HAL_RCC_TIM1_CLK_ENABLE();
 551              		.loc 1 63 0
 552 0006 0023     		movs	r3, #0
 553 0008 7B60     		str	r3, [r7, #4]
 554 000a 194B     		ldr	r3, .L29
 555 000c 5B6C     		ldr	r3, [r3, #68]
 556 000e 184A     		ldr	r2, .L29
 557 0010 43F00103 		orr	r3, r3, #1
 558 0014 5364     		str	r3, [r2, #68]
 559 0016 164B     		ldr	r3, .L29
 560 0018 5B6C     		ldr	r3, [r3, #68]
 561 001a 03F00103 		and	r3, r3, #1
 562 001e 7B60     		str	r3, [r7, #4]
 563 0020 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/ccJjpe8F.s 			page 27


 564              	.LBE15:
  64:la/sampling.c **** 	//Main sampling timer
  65:la/sampling.c **** 	TIM1->DIER = 0;
 565              		.loc 1 65 0
 566 0022 144B     		ldr	r3, .L29+4
 567 0024 0022     		movs	r2, #0
 568 0026 DA60     		str	r2, [r3, #12]
  66:la/sampling.c **** 	TIM1->SR &= ~TIM_SR_UIF;
 569              		.loc 1 66 0
 570 0028 124B     		ldr	r3, .L29+4
 571 002a 1B69     		ldr	r3, [r3, #16]
 572 002c 114A     		ldr	r2, .L29+4
 573 002e 23F00103 		bic	r3, r3, #1
 574 0032 1361     		str	r3, [r2, #16]
  67:la/sampling.c **** 	TIM1->CNT = 0;
 575              		.loc 1 67 0
 576 0034 0F4B     		ldr	r3, .L29+4
 577 0036 0022     		movs	r2, #0
 578 0038 5A62     		str	r2, [r3, #36]
  68:la/sampling.c **** 	TIM1->PSC = 0;
 579              		.loc 1 68 0
 580 003a 0E4B     		ldr	r3, .L29+4
 581 003c 0022     		movs	r2, #0
 582 003e 9A62     		str	r2, [r3, #40]
  69:la/sampling.c **** 	TIM1->CR1 = TIM_CR1_URS;
 583              		.loc 1 69 0
 584 0040 0C4B     		ldr	r3, .L29+4
 585 0042 0422     		movs	r2, #4
 586 0044 1A60     		str	r2, [r3]
  70:la/sampling.c **** 	TIM1->ARR = period;//actual period is +1 of this value
 587              		.loc 1 70 0
 588 0046 0C4B     		ldr	r3, .L29+8
 589 0048 1A88     		ldrh	r2, [r3]
 590 004a 0A4B     		ldr	r3, .L29+4
 591 004c DA62     		str	r2, [r3, #44]
  71:la/sampling.c **** 	TIM1->CR2 = 0;
 592              		.loc 1 71 0
 593 004e 094B     		ldr	r3, .L29+4
 594 0050 0022     		movs	r2, #0
 595 0052 5A60     		str	r2, [r3, #4]
  72:la/sampling.c **** 	TIM1->DIER = TIM_DIER_UDE;
 596              		.loc 1 72 0
 597 0054 074B     		ldr	r3, .L29+4
 598 0056 4FF48072 		mov	r2, #256
 599 005a DA60     		str	r2, [r3, #12]
  73:la/sampling.c **** 	TIM1->EGR = TIM_EGR_UG;
 600              		.loc 1 73 0
 601 005c 054B     		ldr	r3, .L29+4
 602 005e 0122     		movs	r2, #1
 603 0060 5A61     		str	r2, [r3, #20]
  74:la/sampling.c **** }
 604              		.loc 1 74 0
 605 0062 00BF     		nop
 606 0064 0C37     		adds	r7, r7, #12
 607              	.LCFI49:
 608              		.cfi_def_cfa_offset 4
 609 0066 BD46     		mov	sp, r7
ARM GAS  /tmp/ccJjpe8F.s 			page 28


 610              	.LCFI50:
 611              		.cfi_def_cfa_register 13
 612              		@ sp needed
 613 0068 5DF8047B 		ldr	r7, [sp], #4
 614              	.LCFI51:
 615              		.cfi_restore 7
 616              		.cfi_def_cfa_offset 0
 617 006c 7047     		bx	lr
 618              	.L30:
 619 006e 00BF     		.align	2
 620              	.L29:
 621 0070 00380240 		.word	1073887232
 622 0074 00000140 		.word	1073807360
 623 0078 00000000 		.word	period
 624              		.cfi_endproc
 625              	.LFE142:
 627              		.section	.text.SetupSamplingDMA,"ax",%progbits
 628              		.align	1
 629              		.global	SetupSamplingDMA
 630              		.syntax unified
 631              		.thumb
 632              		.thumb_func
 633              		.fpu fpv4-sp-d16
 635              	SetupSamplingDMA:
 636              	.LFB143:
  75:la/sampling.c **** 
  76:la/sampling.c **** void SetupSamplingDMA(void *dataBuffer, uint32_t dataTransferCount)
  77:la/sampling.c **** {
 637              		.loc 1 77 0
 638              		.cfi_startproc
 639              		@ args = 0, pretend = 0, frame = 16
 640              		@ frame_needed = 1, uses_anonymous_args = 0
 641 0000 80B5     		push	{r7, lr}
 642              	.LCFI52:
 643              		.cfi_def_cfa_offset 8
 644              		.cfi_offset 7, -8
 645              		.cfi_offset 14, -4
 646 0002 84B0     		sub	sp, sp, #16
 647              	.LCFI53:
 648              		.cfi_def_cfa_offset 24
 649 0004 00AF     		add	r7, sp, #0
 650              	.LCFI54:
 651              		.cfi_def_cfa_register 7
 652 0006 7860     		str	r0, [r7, #4]
 653 0008 3960     		str	r1, [r7]
  78:la/sampling.c **** 	//RCC_AHB1PeriphClockCmd(RCC_AHB1ENR_DMA2EN, ENABLE);
  79:la/sampling.c **** 	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 654              		.loc 1 79 0
 655 000a 104B     		ldr	r3, .L32
 656 000c 1B6B     		ldr	r3, [r3, #48]
 657 000e 0F4A     		ldr	r2, .L32
 658 0010 43F48003 		orr	r3, r3, #4194304
 659 0014 1363     		str	r3, [r2, #48]
  80:la/sampling.c **** 	uint32_t dmaSize = CalcDMATransferSize();
 660              		.loc 1 80 0
 661 0016 FFF7FEFF 		bl	CalcDMATransferSize
 662 001a F860     		str	r0, [r7, #12]
ARM GAS  /tmp/ccJjpe8F.s 			page 29


  81:la/sampling.c **** 
  82:la/sampling.c **** 	//TIM8->DIER = 0;
  83:la/sampling.c **** 	//TIM8->SR &= ~TIM_SR_UIF;
  84:la/sampling.c **** 
  85:la/sampling.c **** 	//TIM1_UP -> DMA2, Ch6, Stream5
  86:la/sampling.c **** 	//DMA should be stopped before this point
  87:la/sampling.c **** 	DMA2_Stream5->CR = (DMA_SxCR_CHSEL_1 | DMA_SxCR_CHSEL_2) | dmaSize | DMA_SxCR_MINC | DMA_SxCR_CIRC
 663              		.loc 1 87 0
 664 001c 0C4A     		ldr	r2, .L32+4
 665 001e FB68     		ldr	r3, [r7, #12]
 666 0020 43F04063 		orr	r3, r3, #201326592
 667 0024 43F4A063 		orr	r3, r3, #1280
 668 0028 1360     		str	r3, [r2]
  88:la/sampling.c **** 	//DMA2_Stream5->CR = D<>| dmaSize | DMA_SxCR_MINC | DMA_SxCR_CIRC;
  89:la/sampling.c **** 	DMA2_Stream5->M0AR = (uint32_t)dataBuffer;//samplingRam;
 669              		.loc 1 89 0
 670 002a 094A     		ldr	r2, .L32+4
 671 002c 7B68     		ldr	r3, [r7, #4]
 672 002e D360     		str	r3, [r2, #12]
  90:la/sampling.c **** 
  91:la/sampling.c **** 	DMA2_Stream5->PAR  = (uint32_t)&(SAMPLING_PORT->IDR);
 673              		.loc 1 91 0
 674 0030 074B     		ldr	r3, .L32+4
 675 0032 084A     		ldr	r2, .L32+8
 676 0034 9A60     		str	r2, [r3, #8]
  92:la/sampling.c **** 
  93:la/sampling.c **** 	DMA2_Stream5->NDTR = dataTransferCount;//transferCount;// / transferSize;
 677              		.loc 1 93 0
 678 0036 064A     		ldr	r2, .L32+4
 679 0038 3B68     		ldr	r3, [r7]
 680 003a 5360     		str	r3, [r2, #4]
  94:la/sampling.c **** 	DMA2_Stream5->FCR = DMA_SxFCR_DMDIS | DMA_SxFCR_FTH; //disable direct mode, set FIFO-threshold
 681              		.loc 1 94 0
 682 003c 044B     		ldr	r3, .L32+4
 683 003e 0722     		movs	r2, #7
 684 0040 5A61     		str	r2, [r3, #20]
  95:la/sampling.c **** }
 685              		.loc 1 95 0
 686 0042 00BF     		nop
 687 0044 1037     		adds	r7, r7, #16
 688              	.LCFI55:
 689              		.cfi_def_cfa_offset 8
 690 0046 BD46     		mov	sp, r7
 691              	.LCFI56:
 692              		.cfi_def_cfa_register 13
 693              		@ sp needed
 694 0048 80BD     		pop	{r7, pc}
 695              	.L33:
 696 004a 00BF     		.align	2
 697              	.L32:
 698 004c 00380240 		.word	1073887232
 699 0050 88640240 		.word	1073898632
 700 0054 100C0240 		.word	1073875984
 701              		.cfi_endproc
 702              	.LFE143:
 704              		.section	.text.SetupDelayTimer,"ax",%progbits
 705              		.align	1
ARM GAS  /tmp/ccJjpe8F.s 			page 30


 706              		.global	SetupDelayTimer
 707              		.syntax unified
 708              		.thumb
 709              		.thumb_func
 710              		.fpu fpv4-sp-d16
 712              	SetupDelayTimer:
 713              	.LFB144:
  96:la/sampling.c **** 
  97:la/sampling.c **** void SetupDelayTimer()
  98:la/sampling.c **** {
 714              		.loc 1 98 0
 715              		.cfi_startproc
 716              		@ args = 0, pretend = 0, frame = 8
 717              		@ frame_needed = 1, uses_anonymous_args = 0
 718 0000 80B5     		push	{r7, lr}
 719              	.LCFI57:
 720              		.cfi_def_cfa_offset 8
 721              		.cfi_offset 7, -8
 722              		.cfi_offset 14, -4
 723 0002 82B0     		sub	sp, sp, #8
 724              	.LCFI58:
 725              		.cfi_def_cfa_offset 16
 726 0004 00AF     		add	r7, sp, #0
 727              	.LCFI59:
 728              		.cfi_def_cfa_register 7
 729              	.LBB16:
  99:la/sampling.c **** 	//RCC_APB2PeriphClockCmd(RCC_APB2ENR_TIM8EN, ENABLE);
 100:la/sampling.c **** 	__HAL_RCC_TIM8_CLK_ENABLE();
 730              		.loc 1 100 0
 731 0006 0023     		movs	r3, #0
 732 0008 7B60     		str	r3, [r7, #4]
 733 000a 194B     		ldr	r3, .L35
 734 000c 5B6C     		ldr	r3, [r3, #68]
 735 000e 184A     		ldr	r2, .L35
 736 0010 43F00203 		orr	r3, r3, #2
 737 0014 5364     		str	r3, [r2, #68]
 738 0016 164B     		ldr	r3, .L35
 739 0018 5B6C     		ldr	r3, [r3, #68]
 740 001a 03F00203 		and	r3, r3, #2
 741 001e 7B60     		str	r3, [r7, #4]
 742 0020 7B68     		ldr	r3, [r7, #4]
 743              	.LBE16:
 101:la/sampling.c **** 	//After-trigger delay timer
 102:la/sampling.c **** 	TIM8->CR1 = TIM_CR1_URS;//stop timer too
 744              		.loc 1 102 0
 745 0022 144B     		ldr	r3, .L35+4
 746 0024 0422     		movs	r2, #4
 747 0026 1A60     		str	r2, [r3]
 103:la/sampling.c **** 	TIM8->CNT = 0;
 748              		.loc 1 103 0
 749 0028 124B     		ldr	r3, .L35+4
 750 002a 0022     		movs	r2, #0
 751 002c 5A62     		str	r2, [r3, #36]
 104:la/sampling.c **** 	TIM8->ARR = delayCount;//  / transferSize;
 752              		.loc 1 104 0
 753 002e 114A     		ldr	r2, .L35+4
 754 0030 114B     		ldr	r3, .L35+8
ARM GAS  /tmp/ccJjpe8F.s 			page 31


 755 0032 1B68     		ldr	r3, [r3]
 756 0034 D362     		str	r3, [r2, #44]
 105:la/sampling.c **** 	TIM8->PSC = TIM1->ARR;
 757              		.loc 1 105 0
 758 0036 114B     		ldr	r3, .L35+12
 759 0038 0E4A     		ldr	r2, .L35+4
 760 003a DB6A     		ldr	r3, [r3, #44]
 761 003c 9362     		str	r3, [r2, #40]
 106:la/sampling.c **** 	TIM8->CR2 = 0;
 762              		.loc 1 106 0
 763 003e 0D4B     		ldr	r3, .L35+4
 764 0040 0022     		movs	r2, #0
 765 0042 5A60     		str	r2, [r3, #4]
 107:la/sampling.c **** 	TIM8->EGR = TIM_EGR_UG;
 766              		.loc 1 107 0
 767 0044 0B4B     		ldr	r3, .L35+4
 768 0046 0122     		movs	r2, #1
 769 0048 5A61     		str	r2, [r3, #20]
 108:la/sampling.c **** 	TIM8->SR &= ~TIM_SR_UIF;
 770              		.loc 1 108 0
 771 004a 0A4B     		ldr	r3, .L35+4
 772 004c 1B69     		ldr	r3, [r3, #16]
 773 004e 094A     		ldr	r2, .L35+4
 774 0050 23F00103 		bic	r3, r3, #1
 775 0054 1361     		str	r3, [r2, #16]
 109:la/sampling.c **** 	TIM8->DIER = TIM_DIER_UIE;
 776              		.loc 1 109 0
 777 0056 074B     		ldr	r3, .L35+4
 778 0058 0122     		movs	r2, #1
 779 005a DA60     		str	r2, [r3, #12]
 110:la/sampling.c **** 
 111:la/sampling.c **** 	EnableChannel(TIM8_UP_TIM13_IRQn, 2, 0);
 780              		.loc 1 111 0
 781 005c 0022     		movs	r2, #0
 782 005e 0221     		movs	r1, #2
 783 0060 2C20     		movs	r0, #44
 784 0062 FFF7FEFF 		bl	EnableChannel
 112:la/sampling.c **** 	//InterruptController::EnableChannel(TIM8_UP_TIM13_IRQn, 2, 0, SamplingFrameCompelte);
 113:la/sampling.c **** }
 785              		.loc 1 113 0
 786 0066 00BF     		nop
 787 0068 0837     		adds	r7, r7, #8
 788              	.LCFI60:
 789              		.cfi_def_cfa_offset 8
 790 006a BD46     		mov	sp, r7
 791              	.LCFI61:
 792              		.cfi_def_cfa_register 13
 793              		@ sp needed
 794 006c 80BD     		pop	{r7, pc}
 795              	.L36:
 796 006e 00BF     		.align	2
 797              	.L35:
 798 0070 00380240 		.word	1073887232
 799 0074 00040140 		.word	1073808384
 800 0078 00000000 		.word	delayCount
 801 007c 00000140 		.word	1073807360
 802              		.cfi_endproc
ARM GAS  /tmp/ccJjpe8F.s 			page 32


 803              	.LFE144:
 805              		.section	.text.SetupRegularEXTITrigger,"ax",%progbits
 806              		.align	1
 807              		.global	SetupRegularEXTITrigger
 808              		.syntax unified
 809              		.thumb
 810              		.thumb_func
 811              		.fpu fpv4-sp-d16
 813              	SetupRegularEXTITrigger:
 814              	.LFB145:
 114:la/sampling.c **** 
 115:la/sampling.c **** void SetupRegularEXTITrigger()
 116:la/sampling.c **** {
 815              		.loc 1 116 0
 816              		.cfi_startproc
 817              		@ args = 0, pretend = 0, frame = 16
 818              		@ frame_needed = 1, uses_anonymous_args = 0
 819 0000 80B5     		push	{r7, lr}
 820              	.LCFI62:
 821              		.cfi_def_cfa_offset 8
 822              		.cfi_offset 7, -8
 823              		.cfi_offset 14, -4
 824 0002 84B0     		sub	sp, sp, #16
 825              	.LCFI63:
 826              		.cfi_def_cfa_offset 24
 827 0004 00AF     		add	r7, sp, #0
 828              	.LCFI64:
 829              		.cfi_def_cfa_register 7
 830              	.LBB17:
 117:la/sampling.c **** 	//while (CDC_Transmit_FS((uint8_t *)"tessst", 6) != 0);
 118:la/sampling.c **** 	//RCC_APB2PeriphClockCmd(RCC_APB2ENR_SYSCFGEN, ENABLE);
 119:la/sampling.c **** 	__HAL_RCC_SYSCFG_CLK_ENABLE();
 831              		.loc 1 119 0
 832 0006 0023     		movs	r3, #0
 833 0008 3B60     		str	r3, [r7]
 834 000a 534B     		ldr	r3, .L53
 835 000c 5B6C     		ldr	r3, [r3, #68]
 836 000e 524A     		ldr	r2, .L53
 837 0010 43F48043 		orr	r3, r3, #16384
 838 0014 5364     		str	r3, [r2, #68]
 839 0016 504B     		ldr	r3, .L53
 840 0018 5B6C     		ldr	r3, [r3, #68]
 841 001a 03F48043 		and	r3, r3, #16384
 842 001e 3B60     		str	r3, [r7]
 843 0020 3B68     		ldr	r3, [r7]
 844              	.LBE17:
 120:la/sampling.c **** 	//Trigger setup
 121:la/sampling.c **** 	uint32_t rising = triggerMask & triggerValue;
 845              		.loc 1 121 0
 846 0022 4E4B     		ldr	r3, .L53+4
 847 0024 1A68     		ldr	r2, [r3]
 848 0026 4E4B     		ldr	r3, .L53+8
 849 0028 1B68     		ldr	r3, [r3]
 850 002a 1340     		ands	r3, r3, r2
 851 002c FB60     		str	r3, [r7, #12]
 122:la/sampling.c **** 	uint32_t falling = triggerMask & ~triggerValue;
 852              		.loc 1 122 0
ARM GAS  /tmp/ccJjpe8F.s 			page 33


 853 002e 4C4B     		ldr	r3, .L53+8
 854 0030 1B68     		ldr	r3, [r3]
 855 0032 DA43     		mvns	r2, r3
 856 0034 494B     		ldr	r3, .L53+4
 857 0036 1B68     		ldr	r3, [r3]
 858 0038 1340     		ands	r3, r3, r2
 859 003a BB60     		str	r3, [r7, #8]
 123:la/sampling.c **** 	//route exti to triggerMask GPIO port
 124:la/sampling.c **** 	uint32_t extiCR = 0;
 860              		.loc 1 124 0
 861 003c 0023     		movs	r3, #0
 862 003e 7B60     		str	r3, [r7, #4]
 125:la/sampling.c **** 	switch((uint32_t)SAMPLING_PORT)
 126:la/sampling.c **** 	{
 127:la/sampling.c **** 	case GPIOA_BASE:extiCR = 0x0000;break;
 128:la/sampling.c **** 	case GPIOB_BASE:extiCR = 0x1111;break;
 129:la/sampling.c **** 	case GPIOC_BASE:extiCR = 0x2222;break;
 130:la/sampling.c **** 	case GPIOD_BASE:extiCR = 0x3333;break;
 863              		.loc 1 130 0
 864 0040 43F23333 		movw	r3, #13107
 865 0044 7B60     		str	r3, [r7, #4]
 866 0046 00BF     		nop
 131:la/sampling.c **** 	case GPIOE_BASE:extiCR = 0x4444;break;
 132:la/sampling.c **** 	case GPIOF_BASE:extiCR = 0x5555;break;
 133:la/sampling.c **** 	case GPIOG_BASE:extiCR = 0x6666;break;
 134:la/sampling.c **** 	case GPIOH_BASE:extiCR = 0x7777;break;
 135:la/sampling.c **** 	case GPIOI_BASE:extiCR = 0x8888;break;
 136:la/sampling.c **** 	}
 137:la/sampling.c **** 	SYSCFG->EXTICR[0] = extiCR;
 867              		.loc 1 137 0
 868 0048 464A     		ldr	r2, .L53+12
 869 004a 7B68     		ldr	r3, [r7, #4]
 870 004c 9360     		str	r3, [r2, #8]
 138:la/sampling.c **** 	SYSCFG->EXTICR[1] = extiCR;
 871              		.loc 1 138 0
 872 004e 454A     		ldr	r2, .L53+12
 873 0050 7B68     		ldr	r3, [r7, #4]
 874 0052 D360     		str	r3, [r2, #12]
 139:la/sampling.c **** 	SYSCFG->EXTICR[2] = extiCR;
 875              		.loc 1 139 0
 876 0054 434A     		ldr	r2, .L53+12
 877 0056 7B68     		ldr	r3, [r7, #4]
 878 0058 1361     		str	r3, [r2, #16]
 140:la/sampling.c **** 	SYSCFG->EXTICR[3] = extiCR;
 879              		.loc 1 140 0
 880 005a 424A     		ldr	r2, .L53+12
 881 005c 7B68     		ldr	r3, [r7, #4]
 882 005e 5361     		str	r3, [r2, #20]
 141:la/sampling.c **** 
 142:la/sampling.c **** 	EXTI->IMR  = 0;//mask;
 883              		.loc 1 142 0
 884 0060 414B     		ldr	r3, .L53+16
 885 0062 0022     		movs	r2, #0
 886 0064 1A60     		str	r2, [r3]
 143:la/sampling.c **** 	EXTI->PR = 0xffffffff;
 887              		.loc 1 143 0
 888 0066 404B     		ldr	r3, .L53+16
ARM GAS  /tmp/ccJjpe8F.s 			page 34


 889 0068 4FF0FF32 		mov	r2, #-1
 890 006c 5A61     		str	r2, [r3, #20]
 144:la/sampling.c **** 	EXTI->RTSR = rising;
 891              		.loc 1 144 0
 892 006e 3E4A     		ldr	r2, .L53+16
 893 0070 FB68     		ldr	r3, [r7, #12]
 894 0072 9360     		str	r3, [r2, #8]
 145:la/sampling.c **** 	EXTI->FTSR = falling;
 895              		.loc 1 145 0
 896 0074 3C4A     		ldr	r2, .L53+16
 897 0076 BB68     		ldr	r3, [r7, #8]
 898 0078 D360     		str	r3, [r2, #12]
 899              	.LBB18:
 900              	.LBB19:
 901              		.loc 2 879 0
 902              		.syntax unified
 903              	@ 879 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 904 007a BFF34F8F 		dsb 0xF
 905              	@ 0 "" 2
 906              		.thumb
 907              		.syntax unified
 908              	.LBE19:
 909              	.LBE18:
 146:la/sampling.c **** 
 147:la/sampling.c **** 	__DSB();
 148:la/sampling.c **** 	
 149:la/sampling.c **** 	if(triggerMask & 0x0001)EnableChannel(EXTI0_IRQn, 0, 0);
 910              		.loc 1 149 0
 911 007e 374B     		ldr	r3, .L53+4
 912 0080 1B68     		ldr	r3, [r3]
 913 0082 03F00103 		and	r3, r3, #1
 914 0086 002B     		cmp	r3, #0
 915 0088 05D0     		beq	.L38
 916              		.loc 1 149 0 is_stmt 0 discriminator 1
 917 008a 0022     		movs	r2, #0
 918 008c 0021     		movs	r1, #0
 919 008e 0620     		movs	r0, #6
 920 0090 FFF7FEFF 		bl	EnableChannel
 921 0094 02E0     		b	.L39
 922              	.L38:
 150:la/sampling.c **** 	else HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 923              		.loc 1 150 0 is_stmt 1
 924 0096 0620     		movs	r0, #6
 925 0098 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 926              	.L39:
 151:la/sampling.c **** 	if(triggerMask & 0x0002)EnableChannel(EXTI1_IRQn, 0, 0);
 927              		.loc 1 151 0
 928 009c 2F4B     		ldr	r3, .L53+4
 929 009e 1B68     		ldr	r3, [r3]
 930 00a0 03F00203 		and	r3, r3, #2
 931 00a4 002B     		cmp	r3, #0
 932 00a6 05D0     		beq	.L40
 933              		.loc 1 151 0 is_stmt 0 discriminator 1
 934 00a8 0022     		movs	r2, #0
 935 00aa 0021     		movs	r1, #0
 936 00ac 0720     		movs	r0, #7
 937 00ae FFF7FEFF 		bl	EnableChannel
ARM GAS  /tmp/ccJjpe8F.s 			page 35


 938 00b2 02E0     		b	.L41
 939              	.L40:
 152:la/sampling.c **** 	else HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 940              		.loc 1 152 0 is_stmt 1
 941 00b4 0720     		movs	r0, #7
 942 00b6 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 943              	.L41:
 153:la/sampling.c **** 	if(triggerMask & 0x0004)EnableChannel(EXTI2_IRQn, 0, 0);
 944              		.loc 1 153 0
 945 00ba 284B     		ldr	r3, .L53+4
 946 00bc 1B68     		ldr	r3, [r3]
 947 00be 03F00403 		and	r3, r3, #4
 948 00c2 002B     		cmp	r3, #0
 949 00c4 05D0     		beq	.L42
 950              		.loc 1 153 0 is_stmt 0 discriminator 1
 951 00c6 0022     		movs	r2, #0
 952 00c8 0021     		movs	r1, #0
 953 00ca 0820     		movs	r0, #8
 954 00cc FFF7FEFF 		bl	EnableChannel
 955 00d0 02E0     		b	.L43
 956              	.L42:
 154:la/sampling.c **** 	else HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 957              		.loc 1 154 0 is_stmt 1
 958 00d2 0820     		movs	r0, #8
 959 00d4 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 960              	.L43:
 155:la/sampling.c **** 	if(triggerMask & 0x0008)EnableChannel(EXTI3_IRQn, 0, 0);
 961              		.loc 1 155 0
 962 00d8 204B     		ldr	r3, .L53+4
 963 00da 1B68     		ldr	r3, [r3]
 964 00dc 03F00803 		and	r3, r3, #8
 965 00e0 002B     		cmp	r3, #0
 966 00e2 05D0     		beq	.L44
 967              		.loc 1 155 0 is_stmt 0 discriminator 1
 968 00e4 0022     		movs	r2, #0
 969 00e6 0021     		movs	r1, #0
 970 00e8 0920     		movs	r0, #9
 971 00ea FFF7FEFF 		bl	EnableChannel
 972 00ee 02E0     		b	.L45
 973              	.L44:
 156:la/sampling.c **** 	else HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 974              		.loc 1 156 0 is_stmt 1
 975 00f0 0920     		movs	r0, #9
 976 00f2 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 977              	.L45:
 157:la/sampling.c **** 	if(triggerMask & 0x0010)EnableChannel(EXTI4_IRQn, 0, 0);
 978              		.loc 1 157 0
 979 00f6 194B     		ldr	r3, .L53+4
 980 00f8 1B68     		ldr	r3, [r3]
 981 00fa 03F01003 		and	r3, r3, #16
 982 00fe 002B     		cmp	r3, #0
 983 0100 05D0     		beq	.L46
 984              		.loc 1 157 0 is_stmt 0 discriminator 1
 985 0102 0022     		movs	r2, #0
 986 0104 0021     		movs	r1, #0
 987 0106 0A20     		movs	r0, #10
 988 0108 FFF7FEFF 		bl	EnableChannel
ARM GAS  /tmp/ccJjpe8F.s 			page 36


 989 010c 02E0     		b	.L47
 990              	.L46:
 158:la/sampling.c **** 	else HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 991              		.loc 1 158 0 is_stmt 1
 992 010e 0A20     		movs	r0, #10
 993 0110 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 994              	.L47:
 159:la/sampling.c **** 	if(triggerMask & 0x03E0)EnableChannel(EXTI9_5_IRQn, 0, 0);
 995              		.loc 1 159 0
 996 0114 114B     		ldr	r3, .L53+4
 997 0116 1B68     		ldr	r3, [r3]
 998 0118 03F47873 		and	r3, r3, #992
 999 011c 002B     		cmp	r3, #0
 1000 011e 05D0     		beq	.L48
 1001              		.loc 1 159 0 is_stmt 0 discriminator 1
 1002 0120 0022     		movs	r2, #0
 1003 0122 0021     		movs	r1, #0
 1004 0124 1720     		movs	r0, #23
 1005 0126 FFF7FEFF 		bl	EnableChannel
 1006 012a 02E0     		b	.L49
 1007              	.L48:
 160:la/sampling.c **** 	else HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 1008              		.loc 1 160 0 is_stmt 1
 1009 012c 1720     		movs	r0, #23
 1010 012e FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 1011              	.L49:
 161:la/sampling.c **** 	if(triggerMask & 0xFC00)EnableChannel(EXTI15_10_IRQn, 0, 0);
 1012              		.loc 1 161 0
 1013 0132 0A4B     		ldr	r3, .L53+4
 1014 0134 1B68     		ldr	r3, [r3]
 1015 0136 03F47C43 		and	r3, r3, #64512
 1016 013a 002B     		cmp	r3, #0
 1017 013c 05D0     		beq	.L50
 1018              		.loc 1 161 0 is_stmt 0 discriminator 1
 1019 013e 0022     		movs	r2, #0
 1020 0140 0021     		movs	r1, #0
 1021 0142 2820     		movs	r0, #40
 1022 0144 FFF7FEFF 		bl	EnableChannel
 162:la/sampling.c **** 	else HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 163:la/sampling.c **** 
 164:la/sampling.c **** 
 165:la/sampling.c **** #ifdef SAMPLING_MANUAL //push-button-trigger
 166:la/sampling.c **** 	TIM8->SMCR = TIM_SMCR_TS_0 | TIM_SMCR_TS_1 | TIM_SMCR_TS_2;//External trigger input
 167:la/sampling.c **** 	TIM8->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;
 168:la/sampling.c **** 	TIM8->DIER |= TIM_DIER_TIE;
 169:la/sampling.c **** 	EnableChannel(TIM8_TRG_COM_TIM14_IRQn, 2, 0);
 170:la/sampling.c **** 	//samplingManualToExternalTransit = interruptHandler;
 171:la/sampling.c **** #endif
 172:la/sampling.c **** }
 1023              		.loc 1 172 0 is_stmt 1 discriminator 1
 1024 0148 02E0     		b	.L52
 1025              	.L50:
 162:la/sampling.c **** 	else HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 1026              		.loc 1 162 0
 1027 014a 2820     		movs	r0, #40
 1028 014c FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 1029              	.L52:
ARM GAS  /tmp/ccJjpe8F.s 			page 37


 1030              		.loc 1 172 0
 1031 0150 00BF     		nop
 1032 0152 1037     		adds	r7, r7, #16
 1033              	.LCFI65:
 1034              		.cfi_def_cfa_offset 8
 1035 0154 BD46     		mov	sp, r7
 1036              	.LCFI66:
 1037              		.cfi_def_cfa_register 13
 1038              		@ sp needed
 1039 0156 80BD     		pop	{r7, pc}
 1040              	.L54:
 1041              		.align	2
 1042              	.L53:
 1043 0158 00380240 		.word	1073887232
 1044 015c 00000000 		.word	triggerMask
 1045 0160 00000000 		.word	triggerValue
 1046 0164 00380140 		.word	1073821696
 1047 0168 003C0140 		.word	1073822720
 1048              		.cfi_endproc
 1049              	.LFE145:
 1051              		.section	.text.CalcDMATransferSize,"ax",%progbits
 1052              		.align	1
 1053              		.global	CalcDMATransferSize
 1054              		.syntax unified
 1055              		.thumb
 1056              		.thumb_func
 1057              		.fpu fpv4-sp-d16
 1059              	CalcDMATransferSize:
 1060              	.LFB146:
 173:la/sampling.c **** 
 174:la/sampling.c **** uint32_t CalcDMATransferSize()
 175:la/sampling.c **** {
 1061              		.loc 1 175 0
 1062              		.cfi_startproc
 1063              		@ args = 0, pretend = 0, frame = 8
 1064              		@ frame_needed = 1, uses_anonymous_args = 0
 1065              		@ link register save eliminated.
 1066 0000 80B4     		push	{r7}
 1067              	.LCFI67:
 1068              		.cfi_def_cfa_offset 4
 1069              		.cfi_offset 7, -4
 1070 0002 83B0     		sub	sp, sp, #12
 1071              	.LCFI68:
 1072              		.cfi_def_cfa_offset 16
 1073 0004 00AF     		add	r7, sp, #0
 1074              	.LCFI69:
 1075              		.cfi_def_cfa_register 7
 176:la/sampling.c **** 	uint32_t dmaSize = 0;
 1076              		.loc 1 176 0
 1077 0006 0023     		movs	r3, #0
 1078 0008 7B60     		str	r3, [r7, #4]
 177:la/sampling.c **** 	//handle 8/16/32 bit samplings
 178:la/sampling.c **** 	switch(flags & SUMP_FLAG1_GROUPS)
 1079              		.loc 1 178 0
 1080 000a 114B     		ldr	r3, .L62
 1081 000c 1B88     		ldrh	r3, [r3]
 1082 000e 03F03C03 		and	r3, r3, #60
ARM GAS  /tmp/ccJjpe8F.s 			page 38


 1083 0012 002B     		cmp	r3, #0
 1084 0014 08D0     		beq	.L57
 1085 0016 302B     		cmp	r3, #48
 1086 0018 0DD1     		bne	.L61
 179:la/sampling.c **** 	{
 180:la/sampling.c **** 	case SUMP_FLAG1_GR_16BIT:
 181:la/sampling.c **** 		transferSize = 2;
 1087              		.loc 1 181 0
 1088 001a 0E4B     		ldr	r3, .L62+4
 1089 001c 0222     		movs	r2, #2
 1090 001e 1A60     		str	r2, [r3]
 182:la/sampling.c **** 		dmaSize = DMA_SxCR_MSIZE_0 | DMA_SxCR_PSIZE_0;
 1091              		.loc 1 182 0
 1092 0020 4FF42053 		mov	r3, #10240
 1093 0024 7B60     		str	r3, [r7, #4]
 183:la/sampling.c **** 		break;
 1094              		.loc 1 183 0
 1095 0026 0CE0     		b	.L59
 1096              	.L57:
 184:la/sampling.c **** 	case SUMP_FLAG1_GR_32BIT:
 185:la/sampling.c **** 		transferSize = 4;
 1097              		.loc 1 185 0
 1098 0028 0A4B     		ldr	r3, .L62+4
 1099 002a 0422     		movs	r2, #4
 1100 002c 1A60     		str	r2, [r3]
 186:la/sampling.c **** 		dmaSize = DMA_SxCR_MSIZE_1 | DMA_SxCR_PSIZE_1;
 1101              		.loc 1 186 0
 1102 002e 4FF4A043 		mov	r3, #20480
 1103 0032 7B60     		str	r3, [r7, #4]
 187:la/sampling.c **** 		break;
 1104              		.loc 1 187 0
 1105 0034 05E0     		b	.L59
 1106              	.L61:
 188:la/sampling.c **** 	case SUMP_FLAG1_GR_8BIT:
 189:la/sampling.c **** 	default:
 190:la/sampling.c **** 		dmaSize = 0;
 1107              		.loc 1 190 0
 1108 0036 0023     		movs	r3, #0
 1109 0038 7B60     		str	r3, [r7, #4]
 191:la/sampling.c **** 		transferSize = 1;
 1110              		.loc 1 191 0
 1111 003a 064B     		ldr	r3, .L62+4
 1112 003c 0122     		movs	r2, #1
 1113 003e 1A60     		str	r2, [r3]
 192:la/sampling.c **** 		break;
 1114              		.loc 1 192 0
 1115 0040 00BF     		nop
 1116              	.L59:
 193:la/sampling.c **** 	}
 194:la/sampling.c **** 	return dmaSize;
 1117              		.loc 1 194 0
 1118 0042 7B68     		ldr	r3, [r7, #4]
 195:la/sampling.c **** }
 1119              		.loc 1 195 0
 1120 0044 1846     		mov	r0, r3
 1121 0046 0C37     		adds	r7, r7, #12
 1122              	.LCFI70:
ARM GAS  /tmp/ccJjpe8F.s 			page 39


 1123              		.cfi_def_cfa_offset 4
 1124 0048 BD46     		mov	sp, r7
 1125              	.LCFI71:
 1126              		.cfi_def_cfa_register 13
 1127              		@ sp needed
 1128 004a 5DF8047B 		ldr	r7, [sp], #4
 1129              	.LCFI72:
 1130              		.cfi_restore 7
 1131              		.cfi_def_cfa_offset 0
 1132 004e 7047     		bx	lr
 1133              	.L63:
 1134              		.align	2
 1135              	.L62:
 1136 0050 00000000 		.word	flags
 1137 0054 00000000 		.word	transferSize
 1138              		.cfi_endproc
 1139              	.LFE146:
 1141              		.section	.text.SamplingClearBuffer,"ax",%progbits
 1142              		.align	1
 1143              		.global	SamplingClearBuffer
 1144              		.syntax unified
 1145              		.thumb
 1146              		.thumb_func
 1147              		.fpu fpv4-sp-d16
 1149              	SamplingClearBuffer:
 1150              	.LFB147:
 196:la/sampling.c **** 
 197:la/sampling.c **** void SamplingClearBuffer()
 198:la/sampling.c **** {
 1151              		.loc 1 198 0
 1152              		.cfi_startproc
 1153              		@ args = 0, pretend = 0, frame = 8
 1154              		@ frame_needed = 1, uses_anonymous_args = 0
 1155              		@ link register save eliminated.
 1156 0000 80B4     		push	{r7}
 1157              	.LCFI73:
 1158              		.cfi_def_cfa_offset 4
 1159              		.cfi_offset 7, -4
 1160 0002 83B0     		sub	sp, sp, #12
 1161              	.LCFI74:
 1162              		.cfi_def_cfa_offset 16
 1163 0004 00AF     		add	r7, sp, #0
 1164              	.LCFI75:
 1165              		.cfi_def_cfa_register 7
 199:la/sampling.c **** 	int i;
 200:la/sampling.c **** 	for(i = 0; i < MAX_SAMPLING_RAM / 4; i++)
 1166              		.loc 1 200 0
 1167 0006 0023     		movs	r3, #0
 1168 0008 7B60     		str	r3, [r7, #4]
 1169 000a 07E0     		b	.L65
 1170              	.L66:
 201:la/sampling.c **** 		samplingRam[i] = 0;
 1171              		.loc 1 201 0 discriminator 3
 1172 000c 104A     		ldr	r2, .L69
 1173 000e 7B68     		ldr	r3, [r7, #4]
 1174 0010 0021     		movs	r1, #0
 1175 0012 42F82310 		str	r1, [r2, r3, lsl #2]
ARM GAS  /tmp/ccJjpe8F.s 			page 40


 200:la/sampling.c **** 		samplingRam[i] = 0;
 1176              		.loc 1 200 0 discriminator 3
 1177 0016 7B68     		ldr	r3, [r7, #4]
 1178 0018 0133     		adds	r3, r3, #1
 1179 001a 7B60     		str	r3, [r7, #4]
 1180              	.L65:
 200:la/sampling.c **** 		samplingRam[i] = 0;
 1181              		.loc 1 200 0 is_stmt 0 discriminator 1
 1182 001c 7B68     		ldr	r3, [r7, #4]
 1183 001e B3F5C05F 		cmp	r3, #6144
 1184 0022 F3DB     		blt	.L66
 202:la/sampling.c **** 	for(i = 0; i < MAX_SAMPLING_RAM; i++)
 1185              		.loc 1 202 0 is_stmt 1
 1186 0024 0023     		movs	r3, #0
 1187 0026 7B60     		str	r3, [r7, #4]
 1188 0028 07E0     		b	.L67
 1189              	.L68:
 203:la/sampling.c **** 		arr[i] = 0;
 1190              		.loc 1 203 0 discriminator 3
 1191 002a 0A4A     		ldr	r2, .L69+4
 1192 002c 7B68     		ldr	r3, [r7, #4]
 1193 002e 1344     		add	r3, r3, r2
 1194 0030 0022     		movs	r2, #0
 1195 0032 1A70     		strb	r2, [r3]
 202:la/sampling.c **** 	for(i = 0; i < MAX_SAMPLING_RAM; i++)
 1196              		.loc 1 202 0 discriminator 3
 1197 0034 7B68     		ldr	r3, [r7, #4]
 1198 0036 0133     		adds	r3, r3, #1
 1199 0038 7B60     		str	r3, [r7, #4]
 1200              	.L67:
 202:la/sampling.c **** 	for(i = 0; i < MAX_SAMPLING_RAM; i++)
 1201              		.loc 1 202 0 is_stmt 0 discriminator 1
 1202 003a 7B68     		ldr	r3, [r7, #4]
 1203 003c B3F5C04F 		cmp	r3, #24576
 1204 0040 F3DB     		blt	.L68
 204:la/sampling.c **** }
 1205              		.loc 1 204 0 is_stmt 1
 1206 0042 00BF     		nop
 1207 0044 0C37     		adds	r7, r7, #12
 1208              	.LCFI76:
 1209              		.cfi_def_cfa_offset 4
 1210 0046 BD46     		mov	sp, r7
 1211              	.LCFI77:
 1212              		.cfi_def_cfa_register 13
 1213              		@ sp needed
 1214 0048 5DF8047B 		ldr	r7, [sp], #4
 1215              	.LCFI78:
 1216              		.cfi_restore 7
 1217              		.cfi_def_cfa_offset 0
 1218 004c 7047     		bx	lr
 1219              	.L70:
 1220 004e 00BF     		.align	2
 1221              	.L69:
 1222 0050 00000000 		.word	samplingRam
 1223 0054 00000000 		.word	arr
 1224              		.cfi_endproc
 1225              	.LFE147:
ARM GAS  /tmp/ccJjpe8F.s 			page 41


 1227              		.section	.text.SamplingComplete,"ax",%progbits
 1228              		.align	1
 1229              		.global	SamplingComplete
 1230              		.syntax unified
 1231              		.thumb
 1232              		.thumb_func
 1233              		.fpu fpv4-sp-d16
 1235              	SamplingComplete:
 1236              	.LFB148:
 205:la/sampling.c **** 
 206:la/sampling.c **** void SamplingComplete()
 207:la/sampling.c **** {
 1237              		.loc 1 207 0
 1238              		.cfi_startproc
 1239              		@ args = 0, pretend = 0, frame = 16
 1240              		@ frame_needed = 1, uses_anonymous_args = 0
 1241 0000 B0B5     		push	{r4, r5, r7, lr}
 1242              	.LCFI79:
 1243              		.cfi_def_cfa_offset 16
 1244              		.cfi_offset 4, -16
 1245              		.cfi_offset 5, -12
 1246              		.cfi_offset 7, -8
 1247              		.cfi_offset 14, -4
 1248 0002 84B0     		sub	sp, sp, #16
 1249              	.LCFI80:
 1250              		.cfi_def_cfa_offset 32
 1251 0004 00AF     		add	r7, sp, #0
 1252              	.LCFI81:
 1253              		.cfi_def_cfa_register 7
 1254              	.LBB20:
 1255              	.LBB21:
 142:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1256              		.loc 2 142 0
 1257              		.syntax unified
 1258              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1259 0006 72B6     		cpsid i
 1260              	@ 0 "" 2
 1261              		.thumb
 1262              		.syntax unified
 1263              	.LBE21:
 1264              	.LBE20:
 208:la/sampling.c **** 	uint32_t i;
 209:la/sampling.c **** 	
 210:la/sampling.c **** 	__disable_irq();
 211:la/sampling.c **** 	//SUMP requests samples to be sent in reverse order: newest items first
 212:la/sampling.c **** 	if(GetBytesPerTransfer() == 1)
 1265              		.loc 1 212 0
 1266 0008 FFF7FEFF 		bl	GetBytesPerTransfer
 1267 000c 0346     		mov	r3, r0
 1268 000e 012B     		cmp	r3, #1
 1269 0010 45D1     		bne	.L72
 1270              	.LBB22:
 213:la/sampling.c **** 	{
 214:la/sampling.c **** 		uint8_t* ptr = GetBufferTail() - 1;
 1271              		.loc 1 214 0
 1272 0012 FFF7FEFF 		bl	GetBufferTail
 1273 0016 0346     		mov	r3, r0
ARM GAS  /tmp/ccJjpe8F.s 			page 42


 1274 0018 013B     		subs	r3, r3, #1
 1275 001a BB60     		str	r3, [r7, #8]
 215:la/sampling.c **** 		//uint8_t arr[GetBufferSize()];
 216:la/sampling.c **** 		for(i = 0; i < GetBufferTailSize(); i++)
 1276              		.loc 1 216 0
 1277 001c 0023     		movs	r3, #0
 1278 001e FB60     		str	r3, [r7, #12]
 1279 0020 0CE0     		b	.L73
 1280              	.L74:
 217:la/sampling.c **** 		{
 218:la/sampling.c **** 			//while (CDC_Transmit_FS((uint8_t*)ptr, 1) != 0){};
 219:la/sampling.c **** 			arr[i] = *ptr;
 1281              		.loc 1 219 0 discriminator 3
 1282 0022 BB68     		ldr	r3, [r7, #8]
 1283 0024 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1284 0026 474A     		ldr	r2, .L83
 1285 0028 FB68     		ldr	r3, [r7, #12]
 1286 002a 1344     		add	r3, r3, r2
 1287 002c 0A46     		mov	r2, r1
 1288 002e 1A70     		strb	r2, [r3]
 220:la/sampling.c **** 			ptr--;
 1289              		.loc 1 220 0 discriminator 3
 1290 0030 BB68     		ldr	r3, [r7, #8]
 1291 0032 013B     		subs	r3, r3, #1
 1292 0034 BB60     		str	r3, [r7, #8]
 216:la/sampling.c **** 		{
 1293              		.loc 1 216 0 discriminator 3
 1294 0036 FB68     		ldr	r3, [r7, #12]
 1295 0038 0133     		adds	r3, r3, #1
 1296 003a FB60     		str	r3, [r7, #12]
 1297              	.L73:
 216:la/sampling.c **** 		{
 1298              		.loc 1 216 0 is_stmt 0 discriminator 1
 1299 003c FFF7FEFF 		bl	GetBufferTailSize
 1300 0040 0246     		mov	r2, r0
 1301 0042 FB68     		ldr	r3, [r7, #12]
 1302 0044 9342     		cmp	r3, r2
 1303 0046 ECD3     		bcc	.L74
 221:la/sampling.c **** 		}
 222:la/sampling.c **** 		ptr = GetBuffer() + GetBufferSize() - 1;
 1304              		.loc 1 222 0 is_stmt 1
 1305 0048 FFF7FEFF 		bl	GetBuffer
 1306 004c 0446     		mov	r4, r0
 1307 004e FFF7FEFF 		bl	GetBufferSize
 1308 0052 0346     		mov	r3, r0
 1309 0054 013B     		subs	r3, r3, #1
 1310 0056 2344     		add	r3, r3, r4
 1311 0058 BB60     		str	r3, [r7, #8]
 223:la/sampling.c **** 		for(; i < GetBufferSize(); i++)
 1312              		.loc 1 223 0
 1313 005a 0CE0     		b	.L75
 1314              	.L76:
 224:la/sampling.c **** 		{
 225:la/sampling.c **** 			//while (CDC_Transmit_FS((uint8_t*)ptr, 1) != 0){};
 226:la/sampling.c **** 			arr[i] = *ptr;
 1315              		.loc 1 226 0 discriminator 2
 1316 005c BB68     		ldr	r3, [r7, #8]
ARM GAS  /tmp/ccJjpe8F.s 			page 43


 1317 005e 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1318 0060 384A     		ldr	r2, .L83
 1319 0062 FB68     		ldr	r3, [r7, #12]
 1320 0064 1344     		add	r3, r3, r2
 1321 0066 0A46     		mov	r2, r1
 1322 0068 1A70     		strb	r2, [r3]
 227:la/sampling.c **** 			ptr--;
 1323              		.loc 1 227 0 discriminator 2
 1324 006a BB68     		ldr	r3, [r7, #8]
 1325 006c 013B     		subs	r3, r3, #1
 1326 006e BB60     		str	r3, [r7, #8]
 223:la/sampling.c **** 		for(; i < GetBufferSize(); i++)
 1327              		.loc 1 223 0 discriminator 2
 1328 0070 FB68     		ldr	r3, [r7, #12]
 1329 0072 0133     		adds	r3, r3, #1
 1330 0074 FB60     		str	r3, [r7, #12]
 1331              	.L75:
 223:la/sampling.c **** 		for(; i < GetBufferSize(); i++)
 1332              		.loc 1 223 0 is_stmt 0 discriminator 1
 1333 0076 FFF7FEFF 		bl	GetBufferSize
 1334 007a 0246     		mov	r2, r0
 1335 007c FB68     		ldr	r3, [r7, #12]
 1336 007e 9342     		cmp	r3, r2
 1337 0080 ECD3     		bcc	.L76
 228:la/sampling.c **** 		}
 229:la/sampling.c **** 		uint16_t Len_Arr = (uint16_t)GetBufferSize();
 1338              		.loc 1 229 0 is_stmt 1
 1339 0082 FFF7FEFF 		bl	GetBufferSize
 1340 0086 0346     		mov	r3, r0
 1341 0088 7B80     		strh	r3, [r7, #2]	@ movhi
 230:la/sampling.c **** 		while (CDC_Transmit_FS((uint8_t*)arr, Len_Arr) != 0){};
 1342              		.loc 1 230 0
 1343 008a 00BF     		nop
 1344              	.L77:
 1345              		.loc 1 230 0 is_stmt 0 discriminator 1
 1346 008c 7B88     		ldrh	r3, [r7, #2]
 1347 008e 1946     		mov	r1, r3
 1348 0090 2C48     		ldr	r0, .L83
 1349 0092 FFF7FEFF 		bl	CDC_Transmit_FS
 1350 0096 0346     		mov	r3, r0
 1351 0098 002B     		cmp	r3, #0
 1352 009a F7D1     		bne	.L77
 1353 009c 4DE0     		b	.L78
 1354              	.L72:
 1355              	.LBE22:
 231:la/sampling.c **** 
 232:la/sampling.c **** 		//SUMP requests samples to be sent in reverse order: newest items first
 233:la/sampling.c **** 		/*for(i = 0; i < GetBufferTailSize(); i++)
 234:la/sampling.c **** 		{
 235:la/sampling.c **** 			while (CDC_Transmit_FS((uint8_t*)ptr, 1) != 0){};
 236:la/sampling.c **** 			ptr--;
 237:la/sampling.c **** 		}
 238:la/sampling.c **** 		ptr = GetBuffer() + GetBufferSize() - 1;
 239:la/sampling.c **** 		for(; i < GetBufferSize(); i++)
 240:la/sampling.c **** 		{
 241:la/sampling.c **** 			while (CDC_Transmit_FS((uint8_t*)ptr, 1) != 0){};
 242:la/sampling.c **** 			ptr--;
ARM GAS  /tmp/ccJjpe8F.s 			page 44


 243:la/sampling.c **** 		}*/
 244:la/sampling.c **** 	}
 245:la/sampling.c **** 	else if(GetBytesPerTransfer() == 2)
 1356              		.loc 1 245 0 is_stmt 1
 1357 009e FFF7FEFF 		bl	GetBytesPerTransfer
 1358 00a2 0346     		mov	r3, r0
 1359 00a4 022B     		cmp	r3, #2
 1360 00a6 48D1     		bne	.L78
 1361              	.LBB23:
 246:la/sampling.c **** 	{
 247:la/sampling.c **** 		uint8_t *ptr = GetBufferTail() - GetBytesPerTransfer();
 1362              		.loc 1 247 0
 1363 00a8 FFF7FEFF 		bl	GetBufferTail
 1364 00ac 0446     		mov	r4, r0
 1365 00ae FFF7FEFF 		bl	GetBytesPerTransfer
 1366 00b2 0346     		mov	r3, r0
 1367 00b4 5B42     		negs	r3, r3
 1368 00b6 2344     		add	r3, r3, r4
 1369 00b8 7B60     		str	r3, [r7, #4]
 248:la/sampling.c **** 		for(i = 0; i < GetBufferTailSize(); i += GetBytesPerTransfer())
 1370              		.loc 1 248 0
 1371 00ba 0023     		movs	r3, #0
 1372 00bc FB60     		str	r3, [r7, #12]
 1373 00be 11E0     		b	.L79
 1374              	.L80:
 249:la/sampling.c **** 		{
 250:la/sampling.c **** 			CDC_Transmit_FS((uint8_t*)ptr, 2);
 1375              		.loc 1 250 0 discriminator 3
 1376 00c0 0221     		movs	r1, #2
 1377 00c2 7868     		ldr	r0, [r7, #4]
 1378 00c4 FFF7FEFF 		bl	CDC_Transmit_FS
 251:la/sampling.c **** 			ptr -= GetBytesPerTransfer();
 1379              		.loc 1 251 0 discriminator 3
 1380 00c8 FFF7FEFF 		bl	GetBytesPerTransfer
 1381 00cc 0346     		mov	r3, r0
 1382 00ce 5B42     		negs	r3, r3
 1383 00d0 7A68     		ldr	r2, [r7, #4]
 1384 00d2 1344     		add	r3, r3, r2
 1385 00d4 7B60     		str	r3, [r7, #4]
 248:la/sampling.c **** 		for(i = 0; i < GetBufferTailSize(); i += GetBytesPerTransfer())
 1386              		.loc 1 248 0 discriminator 3
 1387 00d6 FFF7FEFF 		bl	GetBytesPerTransfer
 1388 00da 0346     		mov	r3, r0
 1389 00dc 1A46     		mov	r2, r3
 1390 00de FB68     		ldr	r3, [r7, #12]
 1391 00e0 1344     		add	r3, r3, r2
 1392 00e2 FB60     		str	r3, [r7, #12]
 1393              	.L79:
 248:la/sampling.c **** 		for(i = 0; i < GetBufferTailSize(); i += GetBytesPerTransfer())
 1394              		.loc 1 248 0 is_stmt 0 discriminator 1
 1395 00e4 FFF7FEFF 		bl	GetBufferTailSize
 1396 00e8 0246     		mov	r2, r0
 1397 00ea FB68     		ldr	r3, [r7, #12]
 1398 00ec 9342     		cmp	r3, r2
 1399 00ee E7D3     		bcc	.L80
 252:la/sampling.c **** 		}
 253:la/sampling.c **** 		ptr = GetBuffer() + GetBufferSize() - GetBytesPerTransfer();
ARM GAS  /tmp/ccJjpe8F.s 			page 45


 1400              		.loc 1 253 0 is_stmt 1
 1401 00f0 FFF7FEFF 		bl	GetBuffer
 1402 00f4 0446     		mov	r4, r0
 1403 00f6 FFF7FEFF 		bl	GetBufferSize
 1404 00fa 0546     		mov	r5, r0
 1405 00fc FFF7FEFF 		bl	GetBytesPerTransfer
 1406 0100 0346     		mov	r3, r0
 1407 0102 EB1A     		subs	r3, r5, r3
 1408 0104 2344     		add	r3, r3, r4
 1409 0106 7B60     		str	r3, [r7, #4]
 254:la/sampling.c **** 		for(; i < GetBufferSize(); i += GetBytesPerTransfer())
 1410              		.loc 1 254 0
 1411 0108 11E0     		b	.L81
 1412              	.L82:
 255:la/sampling.c **** 		{
 256:la/sampling.c **** 			CDC_Transmit_FS((uint8_t*)ptr, 2);
 1413              		.loc 1 256 0 discriminator 2
 1414 010a 0221     		movs	r1, #2
 1415 010c 7868     		ldr	r0, [r7, #4]
 1416 010e FFF7FEFF 		bl	CDC_Transmit_FS
 257:la/sampling.c **** 			ptr -= GetBytesPerTransfer();
 1417              		.loc 1 257 0 discriminator 2
 1418 0112 FFF7FEFF 		bl	GetBytesPerTransfer
 1419 0116 0346     		mov	r3, r0
 1420 0118 5B42     		negs	r3, r3
 1421 011a 7A68     		ldr	r2, [r7, #4]
 1422 011c 1344     		add	r3, r3, r2
 1423 011e 7B60     		str	r3, [r7, #4]
 254:la/sampling.c **** 		for(; i < GetBufferSize(); i += GetBytesPerTransfer())
 1424              		.loc 1 254 0 discriminator 2
 1425 0120 FFF7FEFF 		bl	GetBytesPerTransfer
 1426 0124 0346     		mov	r3, r0
 1427 0126 1A46     		mov	r2, r3
 1428 0128 FB68     		ldr	r3, [r7, #12]
 1429 012a 1344     		add	r3, r3, r2
 1430 012c FB60     		str	r3, [r7, #12]
 1431              	.L81:
 254:la/sampling.c **** 		for(; i < GetBufferSize(); i += GetBytesPerTransfer())
 1432              		.loc 1 254 0 is_stmt 0 discriminator 1
 1433 012e FFF7FEFF 		bl	GetBufferSize
 1434 0132 0246     		mov	r2, r0
 1435 0134 FB68     		ldr	r3, [r7, #12]
 1436 0136 9342     		cmp	r3, r2
 1437 0138 E7D3     		bcc	.L82
 1438              	.L78:
 1439              	.LBE23:
 1440              	.LBB24:
 1441              	.LBB25:
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1442              		.loc 2 131 0 is_stmt 1
 1443              		.syntax unified
 1444              	@ 131 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1445 013a 62B6     		cpsie i
 1446              	@ 0 "" 2
 1447              		.thumb
 1448              		.syntax unified
 1449              	.LBE25:
ARM GAS  /tmp/ccJjpe8F.s 			page 46


 1450              	.LBE24:
 258:la/sampling.c **** 		}
 259:la/sampling.c **** 	}
 260:la/sampling.c **** 	__enable_irq();
 261:la/sampling.c **** 	
 262:la/sampling.c **** }
 1451              		.loc 1 262 0
 1452 013c 00BF     		nop
 1453 013e 1037     		adds	r7, r7, #16
 1454              	.LCFI82:
 1455              		.cfi_def_cfa_offset 16
 1456 0140 BD46     		mov	sp, r7
 1457              	.LCFI83:
 1458              		.cfi_def_cfa_register 13
 1459              		@ sp needed
 1460 0142 B0BD     		pop	{r4, r5, r7, pc}
 1461              	.L84:
 1462              		.align	2
 1463              	.L83:
 1464 0144 00000000 		.word	arr
 1465              		.cfi_endproc
 1466              	.LFE148:
 1468              		.section	.text.ActualTransferCount,"ax",%progbits
 1469              		.align	1
 1470              		.global	ActualTransferCount
 1471              		.syntax unified
 1472              		.thumb
 1473              		.thumb_func
 1474              		.fpu fpv4-sp-d16
 1476              	ActualTransferCount:
 1477              	.LFB149:
 263:la/sampling.c **** 
 264:la/sampling.c **** uint32_t ActualTransferCount()
 265:la/sampling.c **** {
 1478              		.loc 1 265 0
 1479              		.cfi_startproc
 1480              		@ args = 0, pretend = 0, frame = 0
 1481              		@ frame_needed = 1, uses_anonymous_args = 0
 1482              		@ link register save eliminated.
 1483 0000 80B4     		push	{r7}
 1484              	.LCFI84:
 1485              		.cfi_def_cfa_offset 4
 1486              		.cfi_offset 7, -4
 1487 0002 00AF     		add	r7, sp, #0
 1488              	.LCFI85:
 1489              		.cfi_def_cfa_register 7
 266:la/sampling.c **** 	return transferCount - (DMA2_Stream5->NDTR & ~3);
 1490              		.loc 1 266 0
 1491 0004 054B     		ldr	r3, .L87
 1492 0006 1A68     		ldr	r2, [r3]
 1493 0008 054B     		ldr	r3, .L87+4
 1494 000a 5B68     		ldr	r3, [r3, #4]
 1495 000c 23F00303 		bic	r3, r3, #3
 1496 0010 D31A     		subs	r3, r2, r3
 267:la/sampling.c **** }
 1497              		.loc 1 267 0
 1498 0012 1846     		mov	r0, r3
ARM GAS  /tmp/ccJjpe8F.s 			page 47


 1499 0014 BD46     		mov	sp, r7
 1500              	.LCFI86:
 1501              		.cfi_def_cfa_register 13
 1502              		@ sp needed
 1503 0016 5DF8047B 		ldr	r7, [sp], #4
 1504              	.LCFI87:
 1505              		.cfi_restore 7
 1506              		.cfi_def_cfa_offset 0
 1507 001a 7047     		bx	lr
 1508              	.L88:
 1509              		.align	2
 1510              	.L87:
 1511 001c 00000000 		.word	transferCount
 1512 0020 88640240 		.word	1073898632
 1513              		.cfi_endproc
 1514              	.LFE149:
 1516              		.section	.text.GetBufferTail,"ax",%progbits
 1517              		.align	1
 1518              		.global	GetBufferTail
 1519              		.syntax unified
 1520              		.thumb
 1521              		.thumb_func
 1522              		.fpu fpv4-sp-d16
 1524              	GetBufferTail:
 1525              	.LFB150:
 268:la/sampling.c **** 
 269:la/sampling.c **** uint8_t* GetBufferTail()
 270:la/sampling.c **** {
 1526              		.loc 1 270 0
 1527              		.cfi_startproc
 1528              		@ args = 0, pretend = 0, frame = 0
 1529              		@ frame_needed = 1, uses_anonymous_args = 0
 1530 0000 80B5     		push	{r7, lr}
 1531              	.LCFI88:
 1532              		.cfi_def_cfa_offset 8
 1533              		.cfi_offset 7, -8
 1534              		.cfi_offset 14, -4
 1535 0002 00AF     		add	r7, sp, #0
 1536              	.LCFI89:
 1537              		.cfi_def_cfa_register 7
 271:la/sampling.c **** 	return (uint8_t*)(samplingRam) + ActualTransferCount() * transferSize;
 1538              		.loc 1 271 0
 1539 0004 FFF7FEFF 		bl	ActualTransferCount
 1540 0008 0246     		mov	r2, r0
 1541 000a 044B     		ldr	r3, .L91
 1542 000c 1B68     		ldr	r3, [r3]
 1543 000e 03FB02F3 		mul	r3, r3, r2
 1544 0012 034A     		ldr	r2, .L91+4
 1545 0014 1344     		add	r3, r3, r2
 272:la/sampling.c **** }
 1546              		.loc 1 272 0
 1547 0016 1846     		mov	r0, r3
 1548 0018 80BD     		pop	{r7, pc}
 1549              	.L92:
 1550 001a 00BF     		.align	2
 1551              	.L91:
 1552 001c 00000000 		.word	transferSize
ARM GAS  /tmp/ccJjpe8F.s 			page 48


 1553 0020 00000000 		.word	samplingRam
 1554              		.cfi_endproc
 1555              	.LFE150:
 1557              		.section	.text.GetBytesPerTransfer,"ax",%progbits
 1558              		.align	1
 1559              		.global	GetBytesPerTransfer
 1560              		.syntax unified
 1561              		.thumb
 1562              		.thumb_func
 1563              		.fpu fpv4-sp-d16
 1565              	GetBytesPerTransfer:
 1566              	.LFB151:
 273:la/sampling.c **** 
 274:la/sampling.c **** int GetBytesPerTransfer(){return transferSize;}
 1567              		.loc 1 274 0
 1568              		.cfi_startproc
 1569              		@ args = 0, pretend = 0, frame = 0
 1570              		@ frame_needed = 1, uses_anonymous_args = 0
 1571              		@ link register save eliminated.
 1572 0000 80B4     		push	{r7}
 1573              	.LCFI90:
 1574              		.cfi_def_cfa_offset 4
 1575              		.cfi_offset 7, -4
 1576 0002 00AF     		add	r7, sp, #0
 1577              	.LCFI91:
 1578              		.cfi_def_cfa_register 7
 1579              		.loc 1 274 0
 1580 0004 034B     		ldr	r3, .L95
 1581 0006 1B68     		ldr	r3, [r3]
 1582 0008 1846     		mov	r0, r3
 1583 000a BD46     		mov	sp, r7
 1584              	.LCFI92:
 1585              		.cfi_def_cfa_register 13
 1586              		@ sp needed
 1587 000c 5DF8047B 		ldr	r7, [sp], #4
 1588              	.LCFI93:
 1589              		.cfi_restore 7
 1590              		.cfi_def_cfa_offset 0
 1591 0010 7047     		bx	lr
 1592              	.L96:
 1593 0012 00BF     		.align	2
 1594              	.L95:
 1595 0014 00000000 		.word	transferSize
 1596              		.cfi_endproc
 1597              	.LFE151:
 1599              		.section	.text.GetBufferTailSize,"ax",%progbits
 1600              		.align	1
 1601              		.global	GetBufferTailSize
 1602              		.syntax unified
 1603              		.thumb
 1604              		.thumb_func
 1605              		.fpu fpv4-sp-d16
 1607              	GetBufferTailSize:
 1608              	.LFB152:
 275:la/sampling.c **** 
 276:la/sampling.c **** 
 277:la/sampling.c **** uint32_t GetBufferTailSize()
ARM GAS  /tmp/ccJjpe8F.s 			page 49


 278:la/sampling.c **** {
 1609              		.loc 1 278 0
 1610              		.cfi_startproc
 1611              		@ args = 0, pretend = 0, frame = 0
 1612              		@ frame_needed = 1, uses_anonymous_args = 0
 1613 0000 80B5     		push	{r7, lr}
 1614              	.LCFI94:
 1615              		.cfi_def_cfa_offset 8
 1616              		.cfi_offset 7, -8
 1617              		.cfi_offset 14, -4
 1618 0002 00AF     		add	r7, sp, #0
 1619              	.LCFI95:
 1620              		.cfi_def_cfa_register 7
 279:la/sampling.c **** 	return ActualTransferCount() * transferSize;
 1621              		.loc 1 279 0
 1622 0004 FFF7FEFF 		bl	ActualTransferCount
 1623 0008 0246     		mov	r2, r0
 1624 000a 034B     		ldr	r3, .L99
 1625 000c 1B68     		ldr	r3, [r3]
 1626 000e 03FB02F3 		mul	r3, r3, r2
 280:la/sampling.c **** }
 1627              		.loc 1 280 0
 1628 0012 1846     		mov	r0, r3
 1629 0014 80BD     		pop	{r7, pc}
 1630              	.L100:
 1631 0016 00BF     		.align	2
 1632              	.L99:
 1633 0018 00000000 		.word	transferSize
 1634              		.cfi_endproc
 1635              	.LFE152:
 1637              		.section	.text.GetBufferSize,"ax",%progbits
 1638              		.align	1
 1639              		.global	GetBufferSize
 1640              		.syntax unified
 1641              		.thumb
 1642              		.thumb_func
 1643              		.fpu fpv4-sp-d16
 1645              	GetBufferSize:
 1646              	.LFB153:
 281:la/sampling.c **** 
 282:la/sampling.c **** uint32_t GetBufferSize()
 283:la/sampling.c **** {
 1647              		.loc 1 283 0
 1648              		.cfi_startproc
 1649              		@ args = 0, pretend = 0, frame = 0
 1650              		@ frame_needed = 1, uses_anonymous_args = 0
 1651              		@ link register save eliminated.
 1652 0000 80B4     		push	{r7}
 1653              	.LCFI96:
 1654              		.cfi_def_cfa_offset 4
 1655              		.cfi_offset 7, -4
 1656 0002 00AF     		add	r7, sp, #0
 1657              	.LCFI97:
 1658              		.cfi_def_cfa_register 7
 284:la/sampling.c **** 	return transferCount * transferSize;
 1659              		.loc 1 284 0
 1660 0004 054B     		ldr	r3, .L103
ARM GAS  /tmp/ccJjpe8F.s 			page 50


 1661 0006 1B68     		ldr	r3, [r3]
 1662 0008 054A     		ldr	r2, .L103+4
 1663 000a 1268     		ldr	r2, [r2]
 1664 000c 02FB03F3 		mul	r3, r2, r3
 285:la/sampling.c **** }
 1665              		.loc 1 285 0
 1666 0010 1846     		mov	r0, r3
 1667 0012 BD46     		mov	sp, r7
 1668              	.LCFI98:
 1669              		.cfi_def_cfa_register 13
 1670              		@ sp needed
 1671 0014 5DF8047B 		ldr	r7, [sp], #4
 1672              	.LCFI99:
 1673              		.cfi_restore 7
 1674              		.cfi_def_cfa_offset 0
 1675 0018 7047     		bx	lr
 1676              	.L104:
 1677 001a 00BF     		.align	2
 1678              	.L103:
 1679 001c 00000000 		.word	transferCount
 1680 0020 00000000 		.word	transferSize
 1681              		.cfi_endproc
 1682              	.LFE153:
 1684              		.section	.text.GetBuffer,"ax",%progbits
 1685              		.align	1
 1686              		.global	GetBuffer
 1687              		.syntax unified
 1688              		.thumb
 1689              		.thumb_func
 1690              		.fpu fpv4-sp-d16
 1692              	GetBuffer:
 1693              	.LFB154:
 286:la/sampling.c **** 
 287:la/sampling.c **** uint8_t* GetBuffer()
 288:la/sampling.c **** {
 1694              		.loc 1 288 0
 1695              		.cfi_startproc
 1696              		@ args = 0, pretend = 0, frame = 0
 1697              		@ frame_needed = 1, uses_anonymous_args = 0
 1698              		@ link register save eliminated.
 1699 0000 80B4     		push	{r7}
 1700              	.LCFI100:
 1701              		.cfi_def_cfa_offset 4
 1702              		.cfi_offset 7, -4
 1703 0002 00AF     		add	r7, sp, #0
 1704              	.LCFI101:
 1705              		.cfi_def_cfa_register 7
 289:la/sampling.c **** 	return (uint8_t*)samplingRam;
 1706              		.loc 1 289 0
 1707 0004 024B     		ldr	r3, .L107
 290:la/sampling.c **** }
 1708              		.loc 1 290 0
 1709 0006 1846     		mov	r0, r3
 1710 0008 BD46     		mov	sp, r7
 1711              	.LCFI102:
 1712              		.cfi_def_cfa_register 13
 1713              		@ sp needed
ARM GAS  /tmp/ccJjpe8F.s 			page 51


 1714 000a 5DF8047B 		ldr	r7, [sp], #4
 1715              	.LCFI103:
 1716              		.cfi_restore 7
 1717              		.cfi_def_cfa_offset 0
 1718 000e 7047     		bx	lr
 1719              	.L108:
 1720              		.align	2
 1721              	.L107:
 1722 0010 00000000 		.word	samplingRam
 1723              		.cfi_endproc
 1724              	.LFE154:
 1726              		.section	.text.EnableChannel,"ax",%progbits
 1727              		.align	1
 1728              		.global	EnableChannel
 1729              		.syntax unified
 1730              		.thumb
 1731              		.thumb_func
 1732              		.fpu fpv4-sp-d16
 1734              	EnableChannel:
 1735              	.LFB155:
 291:la/sampling.c **** 
 292:la/sampling.c **** 
 293:la/sampling.c **** // Interrupts
 294:la/sampling.c **** 
 295:la/sampling.c **** 	void EnableChannel(IRQn_Type irqChannel, uint8_t priority, uint8_t subpriority)
 296:la/sampling.c **** 	{
 1736              		.loc 1 296 0
 1737              		.cfi_startproc
 1738              		@ args = 0, pretend = 0, frame = 8
 1739              		@ frame_needed = 1, uses_anonymous_args = 0
 1740 0000 80B5     		push	{r7, lr}
 1741              	.LCFI104:
 1742              		.cfi_def_cfa_offset 8
 1743              		.cfi_offset 7, -8
 1744              		.cfi_offset 14, -4
 1745 0002 82B0     		sub	sp, sp, #8
 1746              	.LCFI105:
 1747              		.cfi_def_cfa_offset 16
 1748 0004 00AF     		add	r7, sp, #0
 1749              	.LCFI106:
 1750              		.cfi_def_cfa_register 7
 1751 0006 0346     		mov	r3, r0
 1752 0008 FB71     		strb	r3, [r7, #7]
 1753 000a 0B46     		mov	r3, r1
 1754 000c BB71     		strb	r3, [r7, #6]
 1755 000e 1346     		mov	r3, r2
 1756 0010 7B71     		strb	r3, [r7, #5]
 297:la/sampling.c **** 		//DisableChannel(irqChannel);
 298:la/sampling.c **** 		HAL_NVIC_DisableIRQ(irqChannel);
 1757              		.loc 1 298 0
 1758 0012 97F90730 		ldrsb	r3, [r7, #7]
 1759 0016 1846     		mov	r0, r3
 1760 0018 FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 299:la/sampling.c **** 		//SetHandler(irqChannel, handler);
 300:la/sampling.c **** 		//SetChannelPriority(irqChannel, priority, subpriority);
 301:la/sampling.c **** 		HAL_NVIC_SetPriority(irqChannel, 0, 0);
 1761              		.loc 1 301 0
ARM GAS  /tmp/ccJjpe8F.s 			page 52


 1762 001c 97F90730 		ldrsb	r3, [r7, #7]
 1763 0020 0022     		movs	r2, #0
 1764 0022 0021     		movs	r1, #0
 1765 0024 1846     		mov	r0, r3
 1766 0026 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 302:la/sampling.c **** 		//NVIC->ISER[irqChannel >> 0x05] =
 303:la/sampling.c **** 	      //(uint32_t)0x01 << (irqChannel & (uint8_t)0x1F);
 304:la/sampling.c **** 		HAL_NVIC_EnableIRQ(irqChannel);
 1767              		.loc 1 304 0
 1768 002a 97F90730 		ldrsb	r3, [r7, #7]
 1769 002e 1846     		mov	r0, r3
 1770 0030 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 305:la/sampling.c **** 
 306:la/sampling.c **** 	}...
 1771              		.loc 1 306 0
 1772 0034 00BF     		nop
 1773 0036 0837     		adds	r7, r7, #8
 1774              	.LCFI107:
 1775              		.cfi_def_cfa_offset 8
 1776 0038 BD46     		mov	sp, r7
 1777              	.LCFI108:
 1778              		.cfi_def_cfa_register 13
 1779              		@ sp needed
 1780 003a 80BD     		pop	{r7, pc}
 1781              		.cfi_endproc
 1782              	.LFE155:
 1784              		.text
 1785              	.Letext0:
 1786              		.file 3 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f407xx.h"
 1787              		.file 4 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1788              		.file 5 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1789              		.file 6 "Drivers/CMSIS/Include/core_cm4.h"
 1790              		.file 7 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1791              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1792              		.file 9 "la/sampling.h"
 1793              		.file 10 "/usr/arm-none-eabi/include/sys/lock.h"
 1794              		.file 11 "/usr/arm-none-eabi/include/sys/_types.h"
 1795              		.file 12 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 1796              		.file 13 "/usr/arm-none-eabi/include/sys/reent.h"
 1797              		.file 14 "/usr/arm-none-eabi/include/stdlib.h"
 1798              		.file 15 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 1799              		.file 16 "Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc/usbd_cdc.h"
 1800              		.file 17 "Inc/usbd_cdc_if.h"
ARM GAS  /tmp/ccJjpe8F.s 			page 53


DEFINED SYMBOLS
                            *ABS*:0000000000000000 sampling.c
                            *COM*:0000000000000004 triggerMask
                            *COM*:0000000000000004 triggerValue
                            *COM*:0000000000000002 flags
                            *COM*:0000000000000002 period
                            *COM*:0000000000000004 transferSize
     /tmp/ccJjpe8F.s:23     .bss.transferCount:0000000000000000 $d
     /tmp/ccJjpe8F.s:26     .bss.transferCount:0000000000000000 transferCount
     /tmp/ccJjpe8F.s:29     .bss.delayCount:0000000000000000 $d
     /tmp/ccJjpe8F.s:32     .bss.delayCount:0000000000000000 delayCount
                            *COM*:0000000000006000 samplingRam
                            *COM*:0000000000006000 arr
     /tmp/ccJjpe8F.s:37     .text.SetBufferSize:0000000000000000 $t
     /tmp/ccJjpe8F.s:44     .text.SetBufferSize:0000000000000000 SetBufferSize
     /tmp/ccJjpe8F.s:84     .text.SetBufferSize:000000000000001c $d
     /tmp/ccJjpe8F.s:89     .text.SetDelayCount:0000000000000000 $t
     /tmp/ccJjpe8F.s:96     .text.SetDelayCount:0000000000000000 SetDelayCount
     /tmp/ccJjpe8F.s:136    .text.SetDelayCount:0000000000000020 $d
     /tmp/ccJjpe8F.s:141    .text.SetTriggerMask:0000000000000000 $t
     /tmp/ccJjpe8F.s:148    .text.SetTriggerMask:0000000000000000 SetTriggerMask
     /tmp/ccJjpe8F.s:187    .text.SetTriggerMask:000000000000001c $d
     /tmp/ccJjpe8F.s:192    .text.SetTriggerValue:0000000000000000 $t
     /tmp/ccJjpe8F.s:199    .text.SetTriggerValue:0000000000000000 SetTriggerValue
     /tmp/ccJjpe8F.s:238    .text.SetTriggerValue:000000000000001c $d
     /tmp/ccJjpe8F.s:243    .text.SetFlags:0000000000000000 $t
     /tmp/ccJjpe8F.s:250    .text.SetFlags:0000000000000000 SetFlags
     /tmp/ccJjpe8F.s:290    .text.SetFlags:000000000000001c $d
     /tmp/ccJjpe8F.s:295    .text.SetSamplingPeriod:0000000000000000 $t
     /tmp/ccJjpe8F.s:302    .text.SetSamplingPeriod:0000000000000000 SetSamplingPeriod
     /tmp/ccJjpe8F.s:342    .text.SetSamplingPeriod:000000000000001c $d
     /tmp/ccJjpe8F.s:347    .text.Start:0000000000000000 $t
     /tmp/ccJjpe8F.s:354    .text.Start:0000000000000000 Start
     /tmp/ccJjpe8F.s:533    .text.SetupSamplingTimer:0000000000000000 SetupSamplingTimer
     /tmp/ccJjpe8F.s:635    .text.SetupSamplingDMA:0000000000000000 SetupSamplingDMA
     /tmp/ccJjpe8F.s:712    .text.SetupDelayTimer:0000000000000000 SetupDelayTimer
     /tmp/ccJjpe8F.s:813    .text.SetupRegularEXTITrigger:0000000000000000 SetupRegularEXTITrigger
     /tmp/ccJjpe8F.s:402    .text.Start:0000000000000040 $d
     /tmp/ccJjpe8F.s:411    .text.Stop:0000000000000000 $t
     /tmp/ccJjpe8F.s:418    .text.Stop:0000000000000000 Stop
     /tmp/ccJjpe8F.s:458    .text.Stop:0000000000000028 $d
     /tmp/ccJjpe8F.s:464    .text.Arm:0000000000000000 $t
     /tmp/ccJjpe8F.s:471    .text.Arm:0000000000000000 Arm
     /tmp/ccJjpe8F.s:520    .text.Arm:0000000000000024 $d
     /tmp/ccJjpe8F.s:526    .text.SetupSamplingTimer:0000000000000000 $t
     /tmp/ccJjpe8F.s:621    .text.SetupSamplingTimer:0000000000000070 $d
     /tmp/ccJjpe8F.s:628    .text.SetupSamplingDMA:0000000000000000 $t
     /tmp/ccJjpe8F.s:1059   .text.CalcDMATransferSize:0000000000000000 CalcDMATransferSize
     /tmp/ccJjpe8F.s:698    .text.SetupSamplingDMA:000000000000004c $d
     /tmp/ccJjpe8F.s:705    .text.SetupDelayTimer:0000000000000000 $t
     /tmp/ccJjpe8F.s:1734   .text.EnableChannel:0000000000000000 EnableChannel
     /tmp/ccJjpe8F.s:798    .text.SetupDelayTimer:0000000000000070 $d
     /tmp/ccJjpe8F.s:806    .text.SetupRegularEXTITrigger:0000000000000000 $t
     /tmp/ccJjpe8F.s:1043   .text.SetupRegularEXTITrigger:0000000000000158 $d
     /tmp/ccJjpe8F.s:1052   .text.CalcDMATransferSize:0000000000000000 $t
     /tmp/ccJjpe8F.s:1136   .text.CalcDMATransferSize:0000000000000050 $d
     /tmp/ccJjpe8F.s:1142   .text.SamplingClearBuffer:0000000000000000 $t
ARM GAS  /tmp/ccJjpe8F.s 			page 54


     /tmp/ccJjpe8F.s:1149   .text.SamplingClearBuffer:0000000000000000 SamplingClearBuffer
     /tmp/ccJjpe8F.s:1222   .text.SamplingClearBuffer:0000000000000050 $d
     /tmp/ccJjpe8F.s:1228   .text.SamplingComplete:0000000000000000 $t
     /tmp/ccJjpe8F.s:1235   .text.SamplingComplete:0000000000000000 SamplingComplete
     /tmp/ccJjpe8F.s:1565   .text.GetBytesPerTransfer:0000000000000000 GetBytesPerTransfer
     /tmp/ccJjpe8F.s:1524   .text.GetBufferTail:0000000000000000 GetBufferTail
     /tmp/ccJjpe8F.s:1607   .text.GetBufferTailSize:0000000000000000 GetBufferTailSize
     /tmp/ccJjpe8F.s:1692   .text.GetBuffer:0000000000000000 GetBuffer
     /tmp/ccJjpe8F.s:1645   .text.GetBufferSize:0000000000000000 GetBufferSize
     /tmp/ccJjpe8F.s:1464   .text.SamplingComplete:0000000000000144 $d
     /tmp/ccJjpe8F.s:1469   .text.ActualTransferCount:0000000000000000 $t
     /tmp/ccJjpe8F.s:1476   .text.ActualTransferCount:0000000000000000 ActualTransferCount
     /tmp/ccJjpe8F.s:1511   .text.ActualTransferCount:000000000000001c $d
     /tmp/ccJjpe8F.s:1517   .text.GetBufferTail:0000000000000000 $t
     /tmp/ccJjpe8F.s:1552   .text.GetBufferTail:000000000000001c $d
     /tmp/ccJjpe8F.s:1558   .text.GetBytesPerTransfer:0000000000000000 $t
     /tmp/ccJjpe8F.s:1595   .text.GetBytesPerTransfer:0000000000000014 $d
     /tmp/ccJjpe8F.s:1600   .text.GetBufferTailSize:0000000000000000 $t
     /tmp/ccJjpe8F.s:1633   .text.GetBufferTailSize:0000000000000018 $d
     /tmp/ccJjpe8F.s:1638   .text.GetBufferSize:0000000000000000 $t
     /tmp/ccJjpe8F.s:1679   .text.GetBufferSize:000000000000001c $d
     /tmp/ccJjpe8F.s:1685   .text.GetBuffer:0000000000000000 $t
     /tmp/ccJjpe8F.s:1722   .text.GetBuffer:0000000000000010 $d
     /tmp/ccJjpe8F.s:1727   .text.EnableChannel:0000000000000000 $t

UNDEFINED SYMBOLS
HAL_NVIC_DisableIRQ
CDC_Transmit_FS
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
