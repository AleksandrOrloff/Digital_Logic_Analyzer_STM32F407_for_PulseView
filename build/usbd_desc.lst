ARM GAS  /tmp/cchmNYgb.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"usbd_desc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.USBD_FS_DeviceDescriptor,"ax",%progbits
  18              		.align	1
  19              		.global	USBD_FS_DeviceDescriptor
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	USBD_FS_DeviceDescriptor:
  26              	.LFB133:
  27              		.file 1 "Src/usbd_desc.c"
   1:Src/usbd_desc.c **** /* USER CODE BEGIN Header */
   2:Src/usbd_desc.c **** /**
   3:Src/usbd_desc.c ****   ******************************************************************************
   4:Src/usbd_desc.c ****   * @file           : usbd_desc.c
   5:Src/usbd_desc.c ****   * @version        : v1.0_Cube
   6:Src/usbd_desc.c ****   * @brief          : This file implements the USB device descriptors.
   7:Src/usbd_desc.c ****   ******************************************************************************
   8:Src/usbd_desc.c ****   * @attention
   9:Src/usbd_desc.c ****   *
  10:Src/usbd_desc.c ****   * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  11:Src/usbd_desc.c ****   * All rights reserved.</center></h2>
  12:Src/usbd_desc.c ****   *
  13:Src/usbd_desc.c ****   * This software component is licensed by ST under Ultimate Liberty license
  14:Src/usbd_desc.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  15:Src/usbd_desc.c ****   * the License. You may obtain a copy of the License at:
  16:Src/usbd_desc.c ****   *                             www.st.com/SLA0044
  17:Src/usbd_desc.c ****   *
  18:Src/usbd_desc.c ****   ******************************************************************************
  19:Src/usbd_desc.c ****   */
  20:Src/usbd_desc.c **** /* USER CODE END Header */
  21:Src/usbd_desc.c **** 
  22:Src/usbd_desc.c **** /* Includes ------------------------------------------------------------------*/
  23:Src/usbd_desc.c **** #include "usbd_core.h"
  24:Src/usbd_desc.c **** #include "usbd_desc.h"
  25:Src/usbd_desc.c **** #include "usbd_conf.h"
  26:Src/usbd_desc.c **** 
  27:Src/usbd_desc.c **** /* USER CODE BEGIN INCLUDE */
  28:Src/usbd_desc.c **** 
  29:Src/usbd_desc.c **** /* USER CODE END INCLUDE */
  30:Src/usbd_desc.c **** 
  31:Src/usbd_desc.c **** /* Private typedef -----------------------------------------------------------*/
ARM GAS  /tmp/cchmNYgb.s 			page 2


  32:Src/usbd_desc.c **** /* Private define ------------------------------------------------------------*/
  33:Src/usbd_desc.c **** /* Private macro -------------------------------------------------------------*/
  34:Src/usbd_desc.c **** 
  35:Src/usbd_desc.c **** /* USER CODE BEGIN PV */
  36:Src/usbd_desc.c **** /* Private variables ---------------------------------------------------------*/
  37:Src/usbd_desc.c **** 
  38:Src/usbd_desc.c **** /* USER CODE END PV */
  39:Src/usbd_desc.c **** 
  40:Src/usbd_desc.c **** /** @addtogroup STM32_USB_OTG_DEVICE_LIBRARY
  41:Src/usbd_desc.c ****   * @{
  42:Src/usbd_desc.c ****   */
  43:Src/usbd_desc.c **** 
  44:Src/usbd_desc.c **** /** @addtogroup USBD_DESC
  45:Src/usbd_desc.c ****   * @{
  46:Src/usbd_desc.c ****   */
  47:Src/usbd_desc.c **** 
  48:Src/usbd_desc.c **** /** @defgroup USBD_DESC_Private_TypesDefinitions USBD_DESC_Private_TypesDefinitions
  49:Src/usbd_desc.c ****   * @brief Private types.
  50:Src/usbd_desc.c ****   * @{
  51:Src/usbd_desc.c ****   */
  52:Src/usbd_desc.c **** 
  53:Src/usbd_desc.c **** /* USER CODE BEGIN PRIVATE_TYPES */
  54:Src/usbd_desc.c **** 
  55:Src/usbd_desc.c **** /* USER CODE END PRIVATE_TYPES */
  56:Src/usbd_desc.c **** 
  57:Src/usbd_desc.c **** /**
  58:Src/usbd_desc.c ****   * @}
  59:Src/usbd_desc.c ****   */
  60:Src/usbd_desc.c **** 
  61:Src/usbd_desc.c **** /** @defgroup USBD_DESC_Private_Defines USBD_DESC_Private_Defines
  62:Src/usbd_desc.c ****   * @brief Private defines.
  63:Src/usbd_desc.c ****   * @{
  64:Src/usbd_desc.c ****   */
  65:Src/usbd_desc.c **** 
  66:Src/usbd_desc.c **** #define USBD_VID     1155
  67:Src/usbd_desc.c **** #define USBD_LANGID_STRING     1033
  68:Src/usbd_desc.c **** #define USBD_MANUFACTURER_STRING     "STMicroelectronics"
  69:Src/usbd_desc.c **** #define USBD_PID_FS     22336
  70:Src/usbd_desc.c **** #define USBD_PRODUCT_STRING_FS     "STM32 Virtual ComPort"
  71:Src/usbd_desc.c **** #define USBD_CONFIGURATION_STRING_FS     "CDC Config"
  72:Src/usbd_desc.c **** #define USBD_INTERFACE_STRING_FS     "CDC Interface"
  73:Src/usbd_desc.c **** 
  74:Src/usbd_desc.c **** #define USB_SIZ_BOS_DESC            0x0C
  75:Src/usbd_desc.c **** 
  76:Src/usbd_desc.c **** /* USER CODE BEGIN PRIVATE_DEFINES */
  77:Src/usbd_desc.c **** 
  78:Src/usbd_desc.c **** /* USER CODE END PRIVATE_DEFINES */
  79:Src/usbd_desc.c **** 
  80:Src/usbd_desc.c **** /**
  81:Src/usbd_desc.c ****   * @}
  82:Src/usbd_desc.c ****   */
  83:Src/usbd_desc.c **** 
  84:Src/usbd_desc.c **** /* USER CODE BEGIN 0 */
  85:Src/usbd_desc.c **** 
  86:Src/usbd_desc.c **** /* USER CODE END 0 */
  87:Src/usbd_desc.c **** 
  88:Src/usbd_desc.c **** /** @defgroup USBD_DESC_Private_Macros USBD_DESC_Private_Macros
ARM GAS  /tmp/cchmNYgb.s 			page 3


  89:Src/usbd_desc.c ****   * @brief Private macros.
  90:Src/usbd_desc.c ****   * @{
  91:Src/usbd_desc.c ****   */
  92:Src/usbd_desc.c **** 
  93:Src/usbd_desc.c **** /* USER CODE BEGIN PRIVATE_MACRO */
  94:Src/usbd_desc.c **** 
  95:Src/usbd_desc.c **** /* USER CODE END PRIVATE_MACRO */
  96:Src/usbd_desc.c **** 
  97:Src/usbd_desc.c **** /**
  98:Src/usbd_desc.c ****   * @}
  99:Src/usbd_desc.c ****   */
 100:Src/usbd_desc.c ****   
 101:Src/usbd_desc.c **** /** @defgroup USBD_DESC_Private_FunctionPrototypes USBD_DESC_Private_FunctionPrototypes
 102:Src/usbd_desc.c ****   * @brief Private functions declaration.
 103:Src/usbd_desc.c ****   * @{
 104:Src/usbd_desc.c ****   */
 105:Src/usbd_desc.c ****   
 106:Src/usbd_desc.c **** static void Get_SerialNum(void);
 107:Src/usbd_desc.c **** static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len);
 108:Src/usbd_desc.c ****   
 109:Src/usbd_desc.c **** /**
 110:Src/usbd_desc.c ****   * @}
 111:Src/usbd_desc.c ****   */  
 112:Src/usbd_desc.c ****   
 113:Src/usbd_desc.c **** 
 114:Src/usbd_desc.c **** /** @defgroup USBD_DESC_Private_FunctionPrototypes USBD_DESC_Private_FunctionPrototypes
 115:Src/usbd_desc.c ****   * @brief Private functions declaration for FS.
 116:Src/usbd_desc.c ****   * @{
 117:Src/usbd_desc.c ****   */
 118:Src/usbd_desc.c **** 
 119:Src/usbd_desc.c **** uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
 120:Src/usbd_desc.c **** uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
 121:Src/usbd_desc.c **** uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
 122:Src/usbd_desc.c **** uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
 123:Src/usbd_desc.c **** uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
 124:Src/usbd_desc.c **** uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
 125:Src/usbd_desc.c **** uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
 126:Src/usbd_desc.c **** #if (USBD_LPM_ENABLED == 1)
 127:Src/usbd_desc.c **** uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length);
 128:Src/usbd_desc.c **** #endif /* (USBD_LPM_ENABLED == 1) */
 129:Src/usbd_desc.c **** 
 130:Src/usbd_desc.c **** /**
 131:Src/usbd_desc.c ****   * @}
 132:Src/usbd_desc.c ****   */
 133:Src/usbd_desc.c **** 
 134:Src/usbd_desc.c **** /** @defgroup USBD_DESC_Private_Variables USBD_DESC_Private_Variables
 135:Src/usbd_desc.c ****   * @brief Private variables.
 136:Src/usbd_desc.c ****   * @{
 137:Src/usbd_desc.c ****   */
 138:Src/usbd_desc.c **** 
 139:Src/usbd_desc.c **** USBD_DescriptorsTypeDef FS_Desc =
 140:Src/usbd_desc.c **** {
 141:Src/usbd_desc.c ****   USBD_FS_DeviceDescriptor
 142:Src/usbd_desc.c **** , USBD_FS_LangIDStrDescriptor
 143:Src/usbd_desc.c **** , USBD_FS_ManufacturerStrDescriptor
 144:Src/usbd_desc.c **** , USBD_FS_ProductStrDescriptor
 145:Src/usbd_desc.c **** , USBD_FS_SerialStrDescriptor
ARM GAS  /tmp/cchmNYgb.s 			page 4


 146:Src/usbd_desc.c **** , USBD_FS_ConfigStrDescriptor
 147:Src/usbd_desc.c **** , USBD_FS_InterfaceStrDescriptor
 148:Src/usbd_desc.c **** #if (USBD_LPM_ENABLED == 1)
 149:Src/usbd_desc.c **** , USBD_FS_USR_BOSDescriptor
 150:Src/usbd_desc.c **** #endif /* (USBD_LPM_ENABLED == 1) */
 151:Src/usbd_desc.c **** };
 152:Src/usbd_desc.c **** 
 153:Src/usbd_desc.c **** #if defined ( __ICCARM__ ) /* IAR Compiler */
 154:Src/usbd_desc.c ****   #pragma data_alignment=4
 155:Src/usbd_desc.c **** #endif /* defined ( __ICCARM__ ) */
 156:Src/usbd_desc.c **** /** USB standard device descriptor. */
 157:Src/usbd_desc.c **** __ALIGN_BEGIN uint8_t USBD_FS_DeviceDesc[USB_LEN_DEV_DESC] __ALIGN_END =
 158:Src/usbd_desc.c **** {
 159:Src/usbd_desc.c ****   0x12,                       /*bLength */
 160:Src/usbd_desc.c ****   USB_DESC_TYPE_DEVICE,       /*bDescriptorType*/
 161:Src/usbd_desc.c **** #if (USBD_LPM_ENABLED == 1)
 162:Src/usbd_desc.c ****   0x01,                       /*bcdUSB */ /* changed to USB version 2.01
 163:Src/usbd_desc.c ****                                              in order to support LPM L1 suspend
 164:Src/usbd_desc.c ****                                              resume test of USBCV3.0*/
 165:Src/usbd_desc.c **** #else
 166:Src/usbd_desc.c ****   0x00,                       /*bcdUSB */
 167:Src/usbd_desc.c **** #endif /* (USBD_LPM_ENABLED == 1) */
 168:Src/usbd_desc.c ****   0x02,
 169:Src/usbd_desc.c ****   0x02,                       /*bDeviceClass*/
 170:Src/usbd_desc.c ****   0x02,                       /*bDeviceSubClass*/
 171:Src/usbd_desc.c ****   0x00,                       /*bDeviceProtocol*/
 172:Src/usbd_desc.c ****   USB_MAX_EP0_SIZE,           /*bMaxPacketSize*/
 173:Src/usbd_desc.c ****   LOBYTE(USBD_VID),           /*idVendor*/
 174:Src/usbd_desc.c ****   HIBYTE(USBD_VID),           /*idVendor*/
 175:Src/usbd_desc.c ****   LOBYTE(USBD_PID_FS),        /*idProduct*/
 176:Src/usbd_desc.c ****   HIBYTE(USBD_PID_FS),        /*idProduct*/
 177:Src/usbd_desc.c ****   0x00,                       /*bcdDevice rel. 2.00*/
 178:Src/usbd_desc.c ****   0x02,
 179:Src/usbd_desc.c ****   USBD_IDX_MFC_STR,           /*Index of manufacturer  string*/
 180:Src/usbd_desc.c ****   USBD_IDX_PRODUCT_STR,       /*Index of product string*/
 181:Src/usbd_desc.c ****   USBD_IDX_SERIAL_STR,        /*Index of serial number string*/
 182:Src/usbd_desc.c ****   USBD_MAX_NUM_CONFIGURATION  /*bNumConfigurations*/
 183:Src/usbd_desc.c **** };
 184:Src/usbd_desc.c **** 
 185:Src/usbd_desc.c **** /* USB_DeviceDescriptor */
 186:Src/usbd_desc.c **** /** BOS descriptor. */
 187:Src/usbd_desc.c **** #if (USBD_LPM_ENABLED == 1)
 188:Src/usbd_desc.c **** #if defined ( __ICCARM__ ) /* IAR Compiler */
 189:Src/usbd_desc.c ****   #pragma data_alignment=4
 190:Src/usbd_desc.c **** #endif /* defined ( __ICCARM__ ) */
 191:Src/usbd_desc.c **** __ALIGN_BEGIN uint8_t USBD_FS_BOSDesc[USB_SIZ_BOS_DESC] __ALIGN_END =
 192:Src/usbd_desc.c **** {
 193:Src/usbd_desc.c ****   0x5,
 194:Src/usbd_desc.c ****   USB_DESC_TYPE_BOS,
 195:Src/usbd_desc.c ****   0xC,
 196:Src/usbd_desc.c ****   0x0,
 197:Src/usbd_desc.c ****   0x1,  /* 1 device capability*/
 198:Src/usbd_desc.c ****         /* device capability*/
 199:Src/usbd_desc.c ****   0x7,
 200:Src/usbd_desc.c ****   USB_DEVICE_CAPABITY_TYPE,
 201:Src/usbd_desc.c ****   0x2,
 202:Src/usbd_desc.c ****   0x2,  /* LPM capability bit set*/
ARM GAS  /tmp/cchmNYgb.s 			page 5


 203:Src/usbd_desc.c ****   0x0,
 204:Src/usbd_desc.c ****   0x0,
 205:Src/usbd_desc.c ****   0x0
 206:Src/usbd_desc.c **** };
 207:Src/usbd_desc.c **** #endif /* (USBD_LPM_ENABLED == 1) */
 208:Src/usbd_desc.c **** 
 209:Src/usbd_desc.c **** /**
 210:Src/usbd_desc.c ****   * @}
 211:Src/usbd_desc.c ****   */
 212:Src/usbd_desc.c **** 
 213:Src/usbd_desc.c **** /** @defgroup USBD_DESC_Private_Variables USBD_DESC_Private_Variables
 214:Src/usbd_desc.c ****   * @brief Private variables.
 215:Src/usbd_desc.c ****   * @{
 216:Src/usbd_desc.c ****   */
 217:Src/usbd_desc.c **** 
 218:Src/usbd_desc.c **** #if defined ( __ICCARM__ ) /* IAR Compiler */
 219:Src/usbd_desc.c ****   #pragma data_alignment=4
 220:Src/usbd_desc.c **** #endif /* defined ( __ICCARM__ ) */
 221:Src/usbd_desc.c **** 
 222:Src/usbd_desc.c **** /** USB lang indentifier descriptor. */
 223:Src/usbd_desc.c **** __ALIGN_BEGIN uint8_t USBD_LangIDDesc[USB_LEN_LANGID_STR_DESC] __ALIGN_END =
 224:Src/usbd_desc.c **** {
 225:Src/usbd_desc.c ****      USB_LEN_LANGID_STR_DESC,
 226:Src/usbd_desc.c ****      USB_DESC_TYPE_STRING,
 227:Src/usbd_desc.c ****      LOBYTE(USBD_LANGID_STRING),
 228:Src/usbd_desc.c ****      HIBYTE(USBD_LANGID_STRING)
 229:Src/usbd_desc.c **** };
 230:Src/usbd_desc.c **** 
 231:Src/usbd_desc.c **** #if defined ( __ICCARM__ ) /* IAR Compiler */
 232:Src/usbd_desc.c ****   #pragma data_alignment=4
 233:Src/usbd_desc.c **** #endif /* defined ( __ICCARM__ ) */
 234:Src/usbd_desc.c **** /* Internal string descriptor. */
 235:Src/usbd_desc.c **** __ALIGN_BEGIN uint8_t USBD_StrDesc[USBD_MAX_STR_DESC_SIZ] __ALIGN_END;
 236:Src/usbd_desc.c **** 
 237:Src/usbd_desc.c **** #if defined ( __ICCARM__ ) /*!< IAR Compiler */
 238:Src/usbd_desc.c ****   #pragma data_alignment=4   
 239:Src/usbd_desc.c **** #endif
 240:Src/usbd_desc.c **** __ALIGN_BEGIN uint8_t USBD_StringSerial[USB_SIZ_STRING_SERIAL] __ALIGN_END = {
 241:Src/usbd_desc.c ****   USB_SIZ_STRING_SERIAL,
 242:Src/usbd_desc.c ****   USB_DESC_TYPE_STRING,
 243:Src/usbd_desc.c **** };
 244:Src/usbd_desc.c **** 
 245:Src/usbd_desc.c **** /**
 246:Src/usbd_desc.c ****   * @}
 247:Src/usbd_desc.c ****   */
 248:Src/usbd_desc.c **** 
 249:Src/usbd_desc.c **** /** @defgroup USBD_DESC_Private_Functions USBD_DESC_Private_Functions
 250:Src/usbd_desc.c ****   * @brief Private functions.
 251:Src/usbd_desc.c ****   * @{
 252:Src/usbd_desc.c ****   */
 253:Src/usbd_desc.c **** 
 254:Src/usbd_desc.c **** /**
 255:Src/usbd_desc.c ****   * @brief  Return the device descriptor
 256:Src/usbd_desc.c ****   * @param  speed : Current device speed
 257:Src/usbd_desc.c ****   * @param  length : Pointer to data length variable
 258:Src/usbd_desc.c ****   * @retval Pointer to descriptor buffer
 259:Src/usbd_desc.c ****   */
ARM GAS  /tmp/cchmNYgb.s 			page 6


 260:Src/usbd_desc.c **** uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
 261:Src/usbd_desc.c **** {
  28              		.loc 1 261 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
 262:Src/usbd_desc.c ****   UNUSED(speed);
 263:Src/usbd_desc.c ****   *length = sizeof(USBD_FS_DeviceDesc);
  34              		.loc 1 263 0
  35 0000 1223     		movs	r3, #18
  36 0002 0B80     		strh	r3, [r1]	@ movhi
 264:Src/usbd_desc.c ****   return USBD_FS_DeviceDesc;
 265:Src/usbd_desc.c **** }
  37              		.loc 1 265 0
  38 0004 0048     		ldr	r0, .L2
  39              	.LVL1:
  40 0006 7047     		bx	lr
  41              	.L3:
  42              		.align	2
  43              	.L2:
  44 0008 00000000 		.word	.LANCHOR0
  45              		.cfi_endproc
  46              	.LFE133:
  48              		.section	.text.USBD_FS_LangIDStrDescriptor,"ax",%progbits
  49              		.align	1
  50              		.global	USBD_FS_LangIDStrDescriptor
  51              		.syntax unified
  52              		.thumb
  53              		.thumb_func
  54              		.fpu fpv4-sp-d16
  56              	USBD_FS_LangIDStrDescriptor:
  57              	.LFB134:
 266:Src/usbd_desc.c **** 
 267:Src/usbd_desc.c **** /**
 268:Src/usbd_desc.c ****   * @brief  Return the LangID string descriptor
 269:Src/usbd_desc.c ****   * @param  speed : Current device speed
 270:Src/usbd_desc.c ****   * @param  length : Pointer to data length variable
 271:Src/usbd_desc.c ****   * @retval Pointer to descriptor buffer
 272:Src/usbd_desc.c ****   */
 273:Src/usbd_desc.c **** uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
 274:Src/usbd_desc.c **** {
  58              		.loc 1 274 0
  59              		.cfi_startproc
  60              		@ args = 0, pretend = 0, frame = 0
  61              		@ frame_needed = 0, uses_anonymous_args = 0
  62              		@ link register save eliminated.
  63              	.LVL2:
 275:Src/usbd_desc.c ****   UNUSED(speed);
 276:Src/usbd_desc.c ****   *length = sizeof(USBD_LangIDDesc);
  64              		.loc 1 276 0
  65 0000 0423     		movs	r3, #4
  66 0002 0B80     		strh	r3, [r1]	@ movhi
 277:Src/usbd_desc.c ****   return USBD_LangIDDesc;
 278:Src/usbd_desc.c **** }
  67              		.loc 1 278 0
ARM GAS  /tmp/cchmNYgb.s 			page 7


  68 0004 0048     		ldr	r0, .L5
  69              	.LVL3:
  70 0006 7047     		bx	lr
  71              	.L6:
  72              		.align	2
  73              	.L5:
  74 0008 00000000 		.word	.LANCHOR1
  75              		.cfi_endproc
  76              	.LFE134:
  78              		.section	.text.IntToUnicode,"ax",%progbits
  79              		.align	1
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  83              		.fpu fpv4-sp-d16
  85              	IntToUnicode:
  86              	.LFB141:
 279:Src/usbd_desc.c **** 
 280:Src/usbd_desc.c **** /**
 281:Src/usbd_desc.c ****   * @brief  Return the product string descriptor
 282:Src/usbd_desc.c ****   * @param  speed : Current device speed
 283:Src/usbd_desc.c ****   * @param  length : Pointer to data length variable
 284:Src/usbd_desc.c ****   * @retval Pointer to descriptor buffer
 285:Src/usbd_desc.c ****   */
 286:Src/usbd_desc.c **** uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
 287:Src/usbd_desc.c **** {
 288:Src/usbd_desc.c ****   if(speed == 0)
 289:Src/usbd_desc.c ****   {
 290:Src/usbd_desc.c ****     USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 291:Src/usbd_desc.c ****   }
 292:Src/usbd_desc.c ****   else
 293:Src/usbd_desc.c ****   {
 294:Src/usbd_desc.c ****     USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 295:Src/usbd_desc.c ****   }
 296:Src/usbd_desc.c ****   return USBD_StrDesc;
 297:Src/usbd_desc.c **** }
 298:Src/usbd_desc.c **** 
 299:Src/usbd_desc.c **** /**
 300:Src/usbd_desc.c ****   * @brief  Return the manufacturer string descriptor
 301:Src/usbd_desc.c ****   * @param  speed : Current device speed
 302:Src/usbd_desc.c ****   * @param  length : Pointer to data length variable
 303:Src/usbd_desc.c ****   * @retval Pointer to descriptor buffer
 304:Src/usbd_desc.c ****   */
 305:Src/usbd_desc.c **** uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
 306:Src/usbd_desc.c **** {
 307:Src/usbd_desc.c ****   UNUSED(speed);
 308:Src/usbd_desc.c ****   USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 309:Src/usbd_desc.c ****   return USBD_StrDesc;
 310:Src/usbd_desc.c **** }
 311:Src/usbd_desc.c **** 
 312:Src/usbd_desc.c **** /**
 313:Src/usbd_desc.c ****   * @brief  Return the serial number string descriptor
 314:Src/usbd_desc.c ****   * @param  speed : Current device speed
 315:Src/usbd_desc.c ****   * @param  length : Pointer to data length variable
 316:Src/usbd_desc.c ****   * @retval Pointer to descriptor buffer
 317:Src/usbd_desc.c ****   */
 318:Src/usbd_desc.c **** uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
ARM GAS  /tmp/cchmNYgb.s 			page 8


 319:Src/usbd_desc.c **** {
 320:Src/usbd_desc.c ****   UNUSED(speed);
 321:Src/usbd_desc.c ****   *length = USB_SIZ_STRING_SERIAL;
 322:Src/usbd_desc.c **** 
 323:Src/usbd_desc.c ****   /* Update the serial number string descriptor with the data from the unique
 324:Src/usbd_desc.c ****    * ID */
 325:Src/usbd_desc.c ****   Get_SerialNum();
 326:Src/usbd_desc.c ****   /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
 327:Src/usbd_desc.c ****   
 328:Src/usbd_desc.c ****   /* USER CODE END USBD_FS_SerialStrDescriptor */
 329:Src/usbd_desc.c ****   return (uint8_t *) USBD_StringSerial;
 330:Src/usbd_desc.c **** }
 331:Src/usbd_desc.c **** 
 332:Src/usbd_desc.c **** /**
 333:Src/usbd_desc.c ****   * @brief  Return the configuration string descriptor
 334:Src/usbd_desc.c ****   * @param  speed : Current device speed
 335:Src/usbd_desc.c ****   * @param  length : Pointer to data length variable
 336:Src/usbd_desc.c ****   * @retval Pointer to descriptor buffer
 337:Src/usbd_desc.c ****   */
 338:Src/usbd_desc.c **** uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
 339:Src/usbd_desc.c **** {
 340:Src/usbd_desc.c ****   if(speed == USBD_SPEED_HIGH)
 341:Src/usbd_desc.c ****   {
 342:Src/usbd_desc.c ****     USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 343:Src/usbd_desc.c ****   }
 344:Src/usbd_desc.c ****   else
 345:Src/usbd_desc.c ****   {
 346:Src/usbd_desc.c ****     USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 347:Src/usbd_desc.c ****   }
 348:Src/usbd_desc.c ****   return USBD_StrDesc;
 349:Src/usbd_desc.c **** }
 350:Src/usbd_desc.c **** 
 351:Src/usbd_desc.c **** /**
 352:Src/usbd_desc.c ****   * @brief  Return the interface string descriptor
 353:Src/usbd_desc.c ****   * @param  speed : Current device speed
 354:Src/usbd_desc.c ****   * @param  length : Pointer to data length variable
 355:Src/usbd_desc.c ****   * @retval Pointer to descriptor buffer
 356:Src/usbd_desc.c ****   */
 357:Src/usbd_desc.c **** uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
 358:Src/usbd_desc.c **** {
 359:Src/usbd_desc.c ****   if(speed == 0)
 360:Src/usbd_desc.c ****   {
 361:Src/usbd_desc.c ****     USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 362:Src/usbd_desc.c ****   }
 363:Src/usbd_desc.c ****   else
 364:Src/usbd_desc.c ****   {
 365:Src/usbd_desc.c ****     USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 366:Src/usbd_desc.c ****   }
 367:Src/usbd_desc.c ****   return USBD_StrDesc;
 368:Src/usbd_desc.c **** }
 369:Src/usbd_desc.c **** 
 370:Src/usbd_desc.c **** #if (USBD_LPM_ENABLED == 1)
 371:Src/usbd_desc.c **** /**
 372:Src/usbd_desc.c ****   * @brief  Return the BOS descriptor
 373:Src/usbd_desc.c ****   * @param  speed : Current device speed
 374:Src/usbd_desc.c ****   * @param  length : Pointer to data length variable
 375:Src/usbd_desc.c ****   * @retval Pointer to descriptor buffer
ARM GAS  /tmp/cchmNYgb.s 			page 9


 376:Src/usbd_desc.c ****   */
 377:Src/usbd_desc.c **** uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
 378:Src/usbd_desc.c **** {
 379:Src/usbd_desc.c ****   UNUSED(speed);
 380:Src/usbd_desc.c ****   *length = sizeof(USBD_FS_BOSDesc);
 381:Src/usbd_desc.c ****   return (uint8_t*)USBD_FS_BOSDesc;
 382:Src/usbd_desc.c **** }
 383:Src/usbd_desc.c **** #endif /* (USBD_LPM_ENABLED == 1) */
 384:Src/usbd_desc.c **** 
 385:Src/usbd_desc.c **** /**
 386:Src/usbd_desc.c ****   * @brief  Create the serial number string descriptor 
 387:Src/usbd_desc.c ****   * @param  None 
 388:Src/usbd_desc.c ****   * @retval None
 389:Src/usbd_desc.c ****   */
 390:Src/usbd_desc.c **** static void Get_SerialNum(void)
 391:Src/usbd_desc.c **** {
 392:Src/usbd_desc.c ****   uint32_t deviceserial0, deviceserial1, deviceserial2;
 393:Src/usbd_desc.c **** 
 394:Src/usbd_desc.c ****   deviceserial0 = *(uint32_t *) DEVICE_ID1;
 395:Src/usbd_desc.c ****   deviceserial1 = *(uint32_t *) DEVICE_ID2;
 396:Src/usbd_desc.c ****   deviceserial2 = *(uint32_t *) DEVICE_ID3;
 397:Src/usbd_desc.c **** 
 398:Src/usbd_desc.c ****   deviceserial0 += deviceserial2;
 399:Src/usbd_desc.c **** 
 400:Src/usbd_desc.c ****   if (deviceserial0 != 0)
 401:Src/usbd_desc.c ****   {
 402:Src/usbd_desc.c ****     IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 403:Src/usbd_desc.c ****     IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 404:Src/usbd_desc.c ****   }
 405:Src/usbd_desc.c **** }
 406:Src/usbd_desc.c **** 
 407:Src/usbd_desc.c **** /**
 408:Src/usbd_desc.c ****   * @brief  Convert Hex 32Bits value into char 
 409:Src/usbd_desc.c ****   * @param  value: value to convert
 410:Src/usbd_desc.c ****   * @param  pbuf: pointer to the buffer 
 411:Src/usbd_desc.c ****   * @param  len: buffer length
 412:Src/usbd_desc.c ****   * @retval None
 413:Src/usbd_desc.c ****   */
 414:Src/usbd_desc.c **** static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
 415:Src/usbd_desc.c **** {
  87              		.loc 1 415 0
  88              		.cfi_startproc
  89              		@ args = 0, pretend = 0, frame = 0
  90              		@ frame_needed = 0, uses_anonymous_args = 0
  91              		@ link register save eliminated.
  92              	.LVL4:
 416:Src/usbd_desc.c ****   uint8_t idx = 0;
 417:Src/usbd_desc.c **** 
 418:Src/usbd_desc.c ****   for (idx = 0; idx < len; idx++)
  93              		.loc 1 418 0
  94 0000 0023     		movs	r3, #0
  95              	.LVL5:
  96 0002 9342     		cmp	r3, r2
  97 0004 16D2     		bcs	.L15
 415:Src/usbd_desc.c ****   uint8_t idx = 0;
  98              		.loc 1 415 0
  99 0006 30B4     		push	{r4, r5}
ARM GAS  /tmp/cchmNYgb.s 			page 10


 100              	.LCFI0:
 101              		.cfi_def_cfa_offset 8
 102              		.cfi_offset 4, -8
 103              		.cfi_offset 5, -4
 104 0008 0BE0     		b	.L11
 105              	.L9:
 419:Src/usbd_desc.c ****   {
 420:Src/usbd_desc.c ****     if (((value >> 28)) < 0xA)
 421:Src/usbd_desc.c ****     {
 422:Src/usbd_desc.c ****       pbuf[2 * idx] = (value >> 28) + '0';
 423:Src/usbd_desc.c ****     }
 424:Src/usbd_desc.c ****     else
 425:Src/usbd_desc.c ****     {
 426:Src/usbd_desc.c ****       pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 106              		.loc 1 426 0
 107 000a 3734     		adds	r4, r4, #55
 108 000c 01F81340 		strb	r4, [r1, r3, lsl #1]
 109              	.L10:
 427:Src/usbd_desc.c ****     }
 428:Src/usbd_desc.c **** 
 429:Src/usbd_desc.c ****     value = value << 4;
 110              		.loc 1 429 0 discriminator 2
 111 0010 0001     		lsls	r0, r0, #4
 112              	.LVL6:
 430:Src/usbd_desc.c **** 
 431:Src/usbd_desc.c ****     pbuf[2 * idx + 1] = 0;
 113              		.loc 1 431 0 discriminator 2
 114 0012 5C00     		lsls	r4, r3, #1
 115 0014 0134     		adds	r4, r4, #1
 116 0016 0025     		movs	r5, #0
 117 0018 0D55     		strb	r5, [r1, r4]
 418:Src/usbd_desc.c ****   {
 118              		.loc 1 418 0 discriminator 2
 119 001a 0133     		adds	r3, r3, #1
 120              	.LVL7:
 121 001c DBB2     		uxtb	r3, r3
 122              	.LVL8:
 123 001e 9342     		cmp	r3, r2
 124 0020 06D2     		bcs	.L16
 125              	.L11:
 420:Src/usbd_desc.c ****     {
 126              		.loc 1 420 0
 127 0022 040F     		lsrs	r4, r0, #28
 128 0024 092C     		cmp	r4, #9
 129 0026 F0D8     		bhi	.L9
 422:Src/usbd_desc.c ****     }
 130              		.loc 1 422 0
 131 0028 3034     		adds	r4, r4, #48
 132 002a 01F81340 		strb	r4, [r1, r3, lsl #1]
 133 002e EFE7     		b	.L10
 134              	.L16:
 432:Src/usbd_desc.c ****   }
 433:Src/usbd_desc.c **** }
 135              		.loc 1 433 0
 136 0030 30BC     		pop	{r4, r5}
 137              	.LCFI1:
 138              		.cfi_restore 5
ARM GAS  /tmp/cchmNYgb.s 			page 11


 139              		.cfi_restore 4
 140              		.cfi_def_cfa_offset 0
 141 0032 7047     		bx	lr
 142              	.L15:
 143 0034 7047     		bx	lr
 144              		.cfi_endproc
 145              	.LFE141:
 147              		.section	.text.Get_SerialNum,"ax",%progbits
 148              		.align	1
 149              		.syntax unified
 150              		.thumb
 151              		.thumb_func
 152              		.fpu fpv4-sp-d16
 154              	Get_SerialNum:
 155              	.LFB140:
 391:Src/usbd_desc.c ****   uint32_t deviceserial0, deviceserial1, deviceserial2;
 156              		.loc 1 391 0
 157              		.cfi_startproc
 158              		@ args = 0, pretend = 0, frame = 0
 159              		@ frame_needed = 0, uses_anonymous_args = 0
 160 0000 38B5     		push	{r3, r4, r5, lr}
 161              	.LCFI2:
 162              		.cfi_def_cfa_offset 16
 163              		.cfi_offset 3, -16
 164              		.cfi_offset 4, -12
 165              		.cfi_offset 5, -8
 166              		.cfi_offset 14, -4
 394:Src/usbd_desc.c ****   deviceserial1 = *(uint32_t *) DEVICE_ID2;
 167              		.loc 1 394 0
 168 0002 0A4B     		ldr	r3, .L21
 169 0004 1868     		ldr	r0, [r3]
 170              	.LVL9:
 395:Src/usbd_desc.c ****   deviceserial2 = *(uint32_t *) DEVICE_ID3;
 171              		.loc 1 395 0
 172 0006 0433     		adds	r3, r3, #4
 173 0008 1C68     		ldr	r4, [r3]
 174              	.LVL10:
 396:Src/usbd_desc.c **** 
 175              		.loc 1 396 0
 176 000a 0433     		adds	r3, r3, #4
 177 000c 1B68     		ldr	r3, [r3]
 178              	.LVL11:
 400:Src/usbd_desc.c ****   {
 179              		.loc 1 400 0
 180 000e C018     		adds	r0, r0, r3
 181              	.LVL12:
 182 0010 00D1     		bne	.L20
 183              	.LVL13:
 184              	.L17:
 405:Src/usbd_desc.c **** 
 185              		.loc 1 405 0
 186 0012 38BD     		pop	{r3, r4, r5, pc}
 187              	.LVL14:
 188              	.L20:
 402:Src/usbd_desc.c ****     IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 189              		.loc 1 402 0
 190 0014 064D     		ldr	r5, .L21+4
ARM GAS  /tmp/cchmNYgb.s 			page 12


 191 0016 0822     		movs	r2, #8
 192 0018 A91C     		adds	r1, r5, #2
 193 001a FFF7FEFF 		bl	IntToUnicode
 194              	.LVL15:
 403:Src/usbd_desc.c ****   }
 195              		.loc 1 403 0
 196 001e 0422     		movs	r2, #4
 197 0020 05F11201 		add	r1, r5, #18
 198 0024 2046     		mov	r0, r4
 199 0026 FFF7FEFF 		bl	IntToUnicode
 200              	.LVL16:
 405:Src/usbd_desc.c **** 
 201              		.loc 1 405 0
 202 002a F2E7     		b	.L17
 203              	.L22:
 204              		.align	2
 205              	.L21:
 206 002c 107AFF1F 		.word	536836624
 207 0030 00000000 		.word	.LANCHOR2
 208              		.cfi_endproc
 209              	.LFE140:
 211              		.section	.text.USBD_FS_SerialStrDescriptor,"ax",%progbits
 212              		.align	1
 213              		.global	USBD_FS_SerialStrDescriptor
 214              		.syntax unified
 215              		.thumb
 216              		.thumb_func
 217              		.fpu fpv4-sp-d16
 219              	USBD_FS_SerialStrDescriptor:
 220              	.LFB137:
 319:Src/usbd_desc.c ****   UNUSED(speed);
 221              		.loc 1 319 0
 222              		.cfi_startproc
 223              		@ args = 0, pretend = 0, frame = 0
 224              		@ frame_needed = 0, uses_anonymous_args = 0
 225              	.LVL17:
 226 0000 08B5     		push	{r3, lr}
 227              	.LCFI3:
 228              		.cfi_def_cfa_offset 8
 229              		.cfi_offset 3, -8
 230              		.cfi_offset 14, -4
 321:Src/usbd_desc.c **** 
 231              		.loc 1 321 0
 232 0002 1A23     		movs	r3, #26
 233 0004 0B80     		strh	r3, [r1]	@ movhi
 325:Src/usbd_desc.c ****   /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
 234              		.loc 1 325 0
 235 0006 FFF7FEFF 		bl	Get_SerialNum
 236              	.LVL18:
 330:Src/usbd_desc.c **** 
 237              		.loc 1 330 0
 238 000a 0148     		ldr	r0, .L25
 239 000c 08BD     		pop	{r3, pc}
 240              	.L26:
 241 000e 00BF     		.align	2
 242              	.L25:
 243 0010 00000000 		.word	.LANCHOR2
ARM GAS  /tmp/cchmNYgb.s 			page 13


 244              		.cfi_endproc
 245              	.LFE137:
 247              		.section	.text.USBD_FS_ProductStrDescriptor,"ax",%progbits
 248              		.align	1
 249              		.global	USBD_FS_ProductStrDescriptor
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 253              		.fpu fpv4-sp-d16
 255              	USBD_FS_ProductStrDescriptor:
 256              	.LFB135:
 287:Src/usbd_desc.c ****   if(speed == 0)
 257              		.loc 1 287 0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 0
 260              		@ frame_needed = 0, uses_anonymous_args = 0
 261              	.LVL19:
 262 0000 08B5     		push	{r3, lr}
 263              	.LCFI4:
 264              		.cfi_def_cfa_offset 8
 265              		.cfi_offset 3, -8
 266              		.cfi_offset 14, -4
 267 0002 0A46     		mov	r2, r1
 288:Src/usbd_desc.c ****   {
 268              		.loc 1 288 0
 269 0004 28B1     		cbz	r0, .L31
 294:Src/usbd_desc.c ****   }
 270              		.loc 1 294 0
 271 0006 0549     		ldr	r1, .L32
 272              	.LVL20:
 273 0008 0548     		ldr	r0, .L32+4
 274              	.LVL21:
 275 000a FFF7FEFF 		bl	USBD_GetString
 276              	.LVL22:
 277              	.L29:
 297:Src/usbd_desc.c **** 
 278              		.loc 1 297 0
 279 000e 0348     		ldr	r0, .L32
 280 0010 08BD     		pop	{r3, pc}
 281              	.LVL23:
 282              	.L31:
 290:Src/usbd_desc.c ****   }
 283              		.loc 1 290 0
 284 0012 0249     		ldr	r1, .L32
 285              	.LVL24:
 286 0014 0248     		ldr	r0, .L32+4
 287              	.LVL25:
 288 0016 FFF7FEFF 		bl	USBD_GetString
 289              	.LVL26:
 290 001a F8E7     		b	.L29
 291              	.L33:
 292              		.align	2
 293              	.L32:
 294 001c 00000000 		.word	USBD_StrDesc
 295 0020 00000000 		.word	.LC0
 296              		.cfi_endproc
 297              	.LFE135:
ARM GAS  /tmp/cchmNYgb.s 			page 14


 299              		.section	.text.USBD_FS_ManufacturerStrDescriptor,"ax",%progbits
 300              		.align	1
 301              		.global	USBD_FS_ManufacturerStrDescriptor
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu fpv4-sp-d16
 307              	USBD_FS_ManufacturerStrDescriptor:
 308              	.LFB136:
 306:Src/usbd_desc.c ****   UNUSED(speed);
 309              		.loc 1 306 0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313              	.LVL27:
 314 0000 10B5     		push	{r4, lr}
 315              	.LCFI5:
 316              		.cfi_def_cfa_offset 8
 317              		.cfi_offset 4, -8
 318              		.cfi_offset 14, -4
 308:Src/usbd_desc.c ****   return USBD_StrDesc;
 319              		.loc 1 308 0
 320 0002 044C     		ldr	r4, .L36
 321 0004 0A46     		mov	r2, r1
 322 0006 2146     		mov	r1, r4
 323              	.LVL28:
 324 0008 0348     		ldr	r0, .L36+4
 325              	.LVL29:
 326 000a FFF7FEFF 		bl	USBD_GetString
 327              	.LVL30:
 310:Src/usbd_desc.c **** 
 328              		.loc 1 310 0
 329 000e 2046     		mov	r0, r4
 330 0010 10BD     		pop	{r4, pc}
 331              	.L37:
 332 0012 00BF     		.align	2
 333              	.L36:
 334 0014 00000000 		.word	USBD_StrDesc
 335 0018 00000000 		.word	.LC1
 336              		.cfi_endproc
 337              	.LFE136:
 339              		.section	.text.USBD_FS_ConfigStrDescriptor,"ax",%progbits
 340              		.align	1
 341              		.global	USBD_FS_ConfigStrDescriptor
 342              		.syntax unified
 343              		.thumb
 344              		.thumb_func
 345              		.fpu fpv4-sp-d16
 347              	USBD_FS_ConfigStrDescriptor:
 348              	.LFB138:
 339:Src/usbd_desc.c ****   if(speed == USBD_SPEED_HIGH)
 349              		.loc 1 339 0
 350              		.cfi_startproc
 351              		@ args = 0, pretend = 0, frame = 0
 352              		@ frame_needed = 0, uses_anonymous_args = 0
 353              	.LVL31:
 354 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/cchmNYgb.s 			page 15


 355              	.LCFI6:
 356              		.cfi_def_cfa_offset 8
 357              		.cfi_offset 3, -8
 358              		.cfi_offset 14, -4
 359 0002 0A46     		mov	r2, r1
 340:Src/usbd_desc.c ****   {
 360              		.loc 1 340 0
 361 0004 28B1     		cbz	r0, .L42
 346:Src/usbd_desc.c ****   }
 362              		.loc 1 346 0
 363 0006 0549     		ldr	r1, .L43
 364              	.LVL32:
 365 0008 0548     		ldr	r0, .L43+4
 366              	.LVL33:
 367 000a FFF7FEFF 		bl	USBD_GetString
 368              	.LVL34:
 369              	.L40:
 349:Src/usbd_desc.c **** 
 370              		.loc 1 349 0
 371 000e 0348     		ldr	r0, .L43
 372 0010 08BD     		pop	{r3, pc}
 373              	.LVL35:
 374              	.L42:
 342:Src/usbd_desc.c ****   }
 375              		.loc 1 342 0
 376 0012 0249     		ldr	r1, .L43
 377              	.LVL36:
 378 0014 0248     		ldr	r0, .L43+4
 379              	.LVL37:
 380 0016 FFF7FEFF 		bl	USBD_GetString
 381              	.LVL38:
 382 001a F8E7     		b	.L40
 383              	.L44:
 384              		.align	2
 385              	.L43:
 386 001c 00000000 		.word	USBD_StrDesc
 387 0020 00000000 		.word	.LC2
 388              		.cfi_endproc
 389              	.LFE138:
 391              		.section	.text.USBD_FS_InterfaceStrDescriptor,"ax",%progbits
 392              		.align	1
 393              		.global	USBD_FS_InterfaceStrDescriptor
 394              		.syntax unified
 395              		.thumb
 396              		.thumb_func
 397              		.fpu fpv4-sp-d16
 399              	USBD_FS_InterfaceStrDescriptor:
 400              	.LFB139:
 358:Src/usbd_desc.c ****   if(speed == 0)
 401              		.loc 1 358 0
 402              		.cfi_startproc
 403              		@ args = 0, pretend = 0, frame = 0
 404              		@ frame_needed = 0, uses_anonymous_args = 0
 405              	.LVL39:
 406 0000 08B5     		push	{r3, lr}
 407              	.LCFI7:
 408              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cchmNYgb.s 			page 16


 409              		.cfi_offset 3, -8
 410              		.cfi_offset 14, -4
 411 0002 0A46     		mov	r2, r1
 359:Src/usbd_desc.c ****   {
 412              		.loc 1 359 0
 413 0004 28B1     		cbz	r0, .L49
 365:Src/usbd_desc.c ****   }
 414              		.loc 1 365 0
 415 0006 0549     		ldr	r1, .L50
 416              	.LVL40:
 417 0008 0548     		ldr	r0, .L50+4
 418              	.LVL41:
 419 000a FFF7FEFF 		bl	USBD_GetString
 420              	.LVL42:
 421              	.L47:
 368:Src/usbd_desc.c **** 
 422              		.loc 1 368 0
 423 000e 0348     		ldr	r0, .L50
 424 0010 08BD     		pop	{r3, pc}
 425              	.LVL43:
 426              	.L49:
 361:Src/usbd_desc.c ****   }
 427              		.loc 1 361 0
 428 0012 0249     		ldr	r1, .L50
 429              	.LVL44:
 430 0014 0248     		ldr	r0, .L50+4
 431              	.LVL45:
 432 0016 FFF7FEFF 		bl	USBD_GetString
 433              	.LVL46:
 434 001a F8E7     		b	.L47
 435              	.L51:
 436              		.align	2
 437              	.L50:
 438 001c 00000000 		.word	USBD_StrDesc
 439 0020 00000000 		.word	.LC3
 440              		.cfi_endproc
 441              	.LFE139:
 443              		.global	USBD_StringSerial
 444              		.comm	USBD_StrDesc,512,4
 445              		.global	USBD_LangIDDesc
 446              		.global	USBD_FS_DeviceDesc
 447              		.global	FS_Desc
 448              		.section	.data.FS_Desc,"aw",%progbits
 449              		.align	2
 452              	FS_Desc:
 453 0000 00000000 		.word	USBD_FS_DeviceDescriptor
 454 0004 00000000 		.word	USBD_FS_LangIDStrDescriptor
 455 0008 00000000 		.word	USBD_FS_ManufacturerStrDescriptor
 456 000c 00000000 		.word	USBD_FS_ProductStrDescriptor
 457 0010 00000000 		.word	USBD_FS_SerialStrDescriptor
 458 0014 00000000 		.word	USBD_FS_ConfigStrDescriptor
 459 0018 00000000 		.word	USBD_FS_InterfaceStrDescriptor
 460              		.section	.data.USBD_FS_DeviceDesc,"aw",%progbits
 461              		.align	2
 462              		.set	.LANCHOR0,. + 0
 465              	USBD_FS_DeviceDesc:
 466 0000 12       		.byte	18
ARM GAS  /tmp/cchmNYgb.s 			page 17


 467 0001 01       		.byte	1
 468 0002 00       		.byte	0
 469 0003 02       		.byte	2
 470 0004 02       		.byte	2
 471 0005 02       		.byte	2
 472 0006 00       		.byte	0
 473 0007 40       		.byte	64
 474 0008 83       		.byte	-125
 475 0009 04       		.byte	4
 476 000a 40       		.byte	64
 477 000b 57       		.byte	87
 478 000c 00       		.byte	0
 479 000d 02       		.byte	2
 480 000e 01       		.byte	1
 481 000f 02       		.byte	2
 482 0010 03       		.byte	3
 483 0011 01       		.byte	1
 484              		.section	.data.USBD_LangIDDesc,"aw",%progbits
 485              		.align	2
 486              		.set	.LANCHOR1,. + 0
 489              	USBD_LangIDDesc:
 490 0000 04       		.byte	4
 491 0001 03       		.byte	3
 492 0002 09       		.byte	9
 493 0003 04       		.byte	4
 494              		.section	.data.USBD_StringSerial,"aw",%progbits
 495              		.align	2
 496              		.set	.LANCHOR2,. + 0
 499              	USBD_StringSerial:
 500 0000 1A       		.byte	26
 501 0001 03       		.byte	3
 502 0002 00000000 		.space	24
 502      00000000 
 502      00000000 
 502      00000000 
 502      00000000 
 503              		.section	.rodata.USBD_FS_ConfigStrDescriptor.str1.4,"aMS",%progbits,1
 504              		.align	2
 505              	.LC2:
 506 0000 43444320 		.ascii	"CDC Config\000"
 506      436F6E66 
 506      696700
 507              		.section	.rodata.USBD_FS_InterfaceStrDescriptor.str1.4,"aMS",%progbits,1
 508              		.align	2
 509              	.LC3:
 510 0000 43444320 		.ascii	"CDC Interface\000"
 510      496E7465 
 510      72666163 
 510      6500
 511              		.section	.rodata.USBD_FS_ManufacturerStrDescriptor.str1.4,"aMS",%progbits,1
 512              		.align	2
 513              	.LC1:
 514 0000 53544D69 		.ascii	"STMicroelectronics\000"
 514      63726F65 
 514      6C656374 
 514      726F6E69 
 514      637300
ARM GAS  /tmp/cchmNYgb.s 			page 18


 515              		.section	.rodata.USBD_FS_ProductStrDescriptor.str1.4,"aMS",%progbits,1
 516              		.align	2
 517              	.LC0:
 518 0000 53544D33 		.ascii	"STM32 Virtual ComPort\000"
 518      32205669 
 518      72747561 
 518      6C20436F 
 518      6D506F72 
 519              		.text
 520              	.Letext0:
 521              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 522              		.file 3 "/usr/arm-none-eabi/include/sys/lock.h"
 523              		.file 4 "/usr/arm-none-eabi/include/sys/_types.h"
 524              		.file 5 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 525              		.file 6 "/usr/arm-none-eabi/include/sys/reent.h"
 526              		.file 7 "/usr/arm-none-eabi/include/sys/_stdint.h"
 527              		.file 8 "/usr/arm-none-eabi/include/stdlib.h"
 528              		.file 9 "Drivers/CMSIS/Include/core_cm4.h"
 529              		.file 10 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 530              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 531              		.file 12 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_def.h"
 532              		.file 13 "Inc/usbd_desc.h"
 533              		.file 14 "Middlewares/ST/STM32_USB_Device_Library/Core/Inc/usbd_ctlreq.h"
ARM GAS  /tmp/cchmNYgb.s 			page 19


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usbd_desc.c
     /tmp/cchmNYgb.s:18     .text.USBD_FS_DeviceDescriptor:0000000000000000 $t
     /tmp/cchmNYgb.s:25     .text.USBD_FS_DeviceDescriptor:0000000000000000 USBD_FS_DeviceDescriptor
     /tmp/cchmNYgb.s:44     .text.USBD_FS_DeviceDescriptor:0000000000000008 $d
     /tmp/cchmNYgb.s:49     .text.USBD_FS_LangIDStrDescriptor:0000000000000000 $t
     /tmp/cchmNYgb.s:56     .text.USBD_FS_LangIDStrDescriptor:0000000000000000 USBD_FS_LangIDStrDescriptor
     /tmp/cchmNYgb.s:74     .text.USBD_FS_LangIDStrDescriptor:0000000000000008 $d
     /tmp/cchmNYgb.s:79     .text.IntToUnicode:0000000000000000 $t
     /tmp/cchmNYgb.s:85     .text.IntToUnicode:0000000000000000 IntToUnicode
     /tmp/cchmNYgb.s:148    .text.Get_SerialNum:0000000000000000 $t
     /tmp/cchmNYgb.s:154    .text.Get_SerialNum:0000000000000000 Get_SerialNum
     /tmp/cchmNYgb.s:206    .text.Get_SerialNum:000000000000002c $d
     /tmp/cchmNYgb.s:212    .text.USBD_FS_SerialStrDescriptor:0000000000000000 $t
     /tmp/cchmNYgb.s:219    .text.USBD_FS_SerialStrDescriptor:0000000000000000 USBD_FS_SerialStrDescriptor
     /tmp/cchmNYgb.s:243    .text.USBD_FS_SerialStrDescriptor:0000000000000010 $d
     /tmp/cchmNYgb.s:248    .text.USBD_FS_ProductStrDescriptor:0000000000000000 $t
     /tmp/cchmNYgb.s:255    .text.USBD_FS_ProductStrDescriptor:0000000000000000 USBD_FS_ProductStrDescriptor
     /tmp/cchmNYgb.s:294    .text.USBD_FS_ProductStrDescriptor:000000000000001c $d
                            *COM*:0000000000000200 USBD_StrDesc
     /tmp/cchmNYgb.s:300    .text.USBD_FS_ManufacturerStrDescriptor:0000000000000000 $t
     /tmp/cchmNYgb.s:307    .text.USBD_FS_ManufacturerStrDescriptor:0000000000000000 USBD_FS_ManufacturerStrDescriptor
     /tmp/cchmNYgb.s:334    .text.USBD_FS_ManufacturerStrDescriptor:0000000000000014 $d
     /tmp/cchmNYgb.s:340    .text.USBD_FS_ConfigStrDescriptor:0000000000000000 $t
     /tmp/cchmNYgb.s:347    .text.USBD_FS_ConfigStrDescriptor:0000000000000000 USBD_FS_ConfigStrDescriptor
     /tmp/cchmNYgb.s:386    .text.USBD_FS_ConfigStrDescriptor:000000000000001c $d
     /tmp/cchmNYgb.s:392    .text.USBD_FS_InterfaceStrDescriptor:0000000000000000 $t
     /tmp/cchmNYgb.s:399    .text.USBD_FS_InterfaceStrDescriptor:0000000000000000 USBD_FS_InterfaceStrDescriptor
     /tmp/cchmNYgb.s:438    .text.USBD_FS_InterfaceStrDescriptor:000000000000001c $d
     /tmp/cchmNYgb.s:499    .data.USBD_StringSerial:0000000000000000 USBD_StringSerial
     /tmp/cchmNYgb.s:489    .data.USBD_LangIDDesc:0000000000000000 USBD_LangIDDesc
     /tmp/cchmNYgb.s:465    .data.USBD_FS_DeviceDesc:0000000000000000 USBD_FS_DeviceDesc
     /tmp/cchmNYgb.s:452    .data.FS_Desc:0000000000000000 FS_Desc
     /tmp/cchmNYgb.s:449    .data.FS_Desc:0000000000000000 $d
     /tmp/cchmNYgb.s:461    .data.USBD_FS_DeviceDesc:0000000000000000 $d
     /tmp/cchmNYgb.s:485    .data.USBD_LangIDDesc:0000000000000000 $d
     /tmp/cchmNYgb.s:495    .data.USBD_StringSerial:0000000000000000 $d
     /tmp/cchmNYgb.s:504    .rodata.USBD_FS_ConfigStrDescriptor.str1.4:0000000000000000 $d
     /tmp/cchmNYgb.s:508    .rodata.USBD_FS_InterfaceStrDescriptor.str1.4:0000000000000000 $d
     /tmp/cchmNYgb.s:512    .rodata.USBD_FS_ManufacturerStrDescriptor.str1.4:0000000000000000 $d
     /tmp/cchmNYgb.s:516    .rodata.USBD_FS_ProductStrDescriptor.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
USBD_GetString
